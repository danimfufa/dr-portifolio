can you develop personal doctor portifolio website who is specialist at general surgery and this project is also with fully functional appointment management system?


Okay, this is a fantastic project idea! Building a personal doctor portfolio website with a fully functional appointment management system involves several key components, similar to the online class system, but tailored specifically for a medical professional.

Let's break down how we can develop this step-by-step.

Project Name: Dr. [Doctor's Name] - General Surgery Portfolio & Appointment System

Target Audience: Potential patients, referring doctors, and the general public.

Core Objectives:

Professional Portfolio: Showcase the doctor's expertise, services, qualifications, and contact information.

Appointment Management: Allow patients to book, view, and manage appointments online.

Administrator (Doctor) Panel: Enable the doctor to view, confirm/decline, manage, and track appointments, as well as update their portfolio content.

Technology Stack (Recommended):

Backend: PHP (using a framework like Laravel for robust features, security, and speed, or plain PHP for a simpler project if you prefer).

Database: MySQL

Frontend: HTML, CSS (with a framework like Bootstrap for responsive design), JavaScript (jQuery or a modern framework like Vue.js/React if you want more interactivity).

Web Server: Apache or Nginx

Phase 1: Planning & Setup
Step 1: Define User Roles and Features
User Roles:

Doctor (Admin):

Manage personal profile (bio, specialties, experience, photos).

Manage services offered.

Set available appointment slots (dates, times, duration).

View all appointment requests.

Approve, decline, or reschedule appointments.

View patient details for appointments.

Manage testimonials/reviews.

Manage contact information.

Update website content (e.g., blog posts, FAQs).

Patient (Guest User / Registered User - optional):

View doctor's profile, services, and qualifications.

View available appointment slots.

Book an appointment (fill in details like name, contact, reason for visit).

Receive confirmation/notification (via email if integrated).

(Optional: If registered) View their upcoming/past appointments.

(Optional: If registered) Edit/cancel their own appointments.

Step 2: Set Up Your Development Environment
(This is the same as our previous discussion, but good to reiterate for this specific project)

Choose a Bundle: XAMPP, WampServer, MAMP, or Laragon.

Download and Install: Follow the official instructions for your chosen bundle.

Start Services: Ensure Apache/Nginx and MySQL are running.

Test Installation:

http://localhost/ (web server check)

http://localhost/phpmyadmin/ (MySQL/PHPMyAdmin check)

Once you have successfully set up your environment, confirm that all services are running, and we can proceed to database design.

Phase 2: Database Design (MySQL)
This is a critical step. We'll design the tables to store all the necessary information.

Step 3: Create the Database and Initial Tables
Let's start by creating the database and the core tables for the doctor's portfolio and appointment system.

Database Name: doctor_portfolio (or dr_surname_clinic, etc.)

Tables:

doctor_profile (Stores the doctor's personal info - acts as a single row for the 'admin'):

id (INT, PK, AUTO_INCREMENT)

name (VARCHAR)

specialty (VARCHAR) - e.g., "General Surgery"

qualifications (TEXT) - HTML allowed for rich text

experience (TEXT) - HTML allowed

bio (TEXT) - HTML allowed

profile_image_path (VARCHAR, NULLABLE)

contact_email (VARCHAR)

contact_phone (VARCHAR)

clinic_address (VARCHAR)

social_media_links (TEXT, NULLABLE - JSON or comma-separated for multiple links)

last_updated_at (DATETIME)

Self-note: This table will typically have only one row, updated by the doctor.

services (Services offered by the doctor):

id (INT, PK, AUTO_INCREMENT)

service_name (VARCHAR) - e.g., "Appendectomy", "Hernia Repair"

description (TEXT)

duration_minutes (INT, NULLABLE) - Avg duration for planning

price (DECIMAL(10, 2), NULLABLE)

created_at (DATETIME)

updated_at (DATETIME)

appointments (Stores all appointment requests/bookings):

id (INT, PK, AUTO_INCREMENT)

patient_name (VARCHAR)

patient_email (VARCHAR)

patient_phone (VARCHAR)

appointment_date (DATE)

appointment_time (TIME)

reason_for_visit (TEXT)

status (ENUM('pending', 'confirmed', 'cancelled_by_patient', 'cancelled_by_doctor', 'completed', 'rescheduled')) - Default 'pending'

doctor_notes (TEXT, NULLABLE - for internal doctor use)

created_at (DATETIME)

updated_at (DATETIME)

available_slots (Doctor defines their availability, optional but recommended for more control):

id (INT, PK, AUTO_INCREMENT)

slot_date (DATE)

start_time (TIME)

end_time (TIME)

is_booked (TINYINT(1), DEFAULT 0) - 1 if booked, 0 if available

appointment_id (INT, FK to appointments.id, NULLABLE, UNIQUE) - Links to the actual appointment if booked

created_at (DATETIME)

updated_at (DATETIME)

Alternative for available_slots: Just rely on appointments table and check for time conflicts. However, available_slots gives the doctor more precise control over when they are willing to take appointments, and can define specific durations for each slot. We can start simple without available_slots and add it later if needed. For now, let's keep it simple and just rely on appointments table for booking and conflict checking in PHP.

testimonials (For patient reviews):

id (INT, PK, AUTO_INCREMENT)

patient_name (VARCHAR)

testimonial_text (TEXT)

rating (INT, NULLABLE - e.g., 1-5 stars)

is_approved (TINYINT(1), DEFAULT 0) - Doctor approves before displaying

created_at (DATETIME)

Action: Create the Database and Tables

Access PHPMyAdmin: Go to http://localhost/phpmyadmin/.

Create Database:

Click on "New" in the left sidebar.

Enter doctor_portfolio as the database name.

Choose a collation (e.g., utf8mb4_unicode_ci is a good default).

Click "Create".

Create Tables (SQL Commands):

Once the database is created, select it from the left sidebar. Then click on the "SQL" tab. Copy and paste the following SQL commands one by one, or all at once, and execute them.

SQL

-- Table: doctor_profile
CREATE TABLE `doctor_profile` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(255) NOT NULL,
    `specialty` VARCHAR(255) NOT NULL,
    `qualifications` TEXT,
    `experience` TEXT,
    `bio` TEXT,
    `profile_image_path` VARCHAR(255) DEFAULT NULL,
    `contact_email` VARCHAR(255) NOT NULL,
    `contact_phone` VARCHAR(50) NOT NULL,
    `clinic_address` VARCHAR(255) NOT NULL,
    `social_media_links` TEXT DEFAULT NULL,
    `last_updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: services
CREATE TABLE `services` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `service_name` VARCHAR(255) NOT NULL,
    `description` TEXT,
    `duration_minutes` INT DEFAULT NULL,
    `price` DECIMAL(10, 2) DEFAULT NULL,
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table: appointments
CREATE TABLE `appointments` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `patient_name` VARCHAR(255) NOT NULL,
    `patient_email` VARCHAR(255) NOT NULL,
    `patient_phone` VARCHAR(50) NOT NULL,
    `appointment_date` DATE NOT NULL,
    `appointment_time` TIME NOT NULL,
    `reason_for_visit` TEXT NOT NULL,
    `status` ENUM('pending', 'confirmed', 'cancelled_by_patient', 'cancelled_by_doctor', 'completed', 'rescheduled') DEFAULT 'pending',
    `doctor_notes` TEXT DEFAULT NULL,
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY `unique_appointment` (`appointment_date`, `appointment_time`) -- Prevents double booking the exact same slot
);

-- Table: testimonials
CREATE TABLE `testimonials` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `patient_name` VARCHAR(255) NOT NULL,
    `testimonial_text` TEXT NOT NULL,
    `rating` INT DEFAULT NULL,
    `is_approved` TINYINT(1) DEFAULT 0,
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP
);
Self-note on UNIQUE KEY for appointments: This will prevent two different patients from trying to book the exact same second of the same time slot. However, for a real appointment system, you'd define appointment durations and check for overlaps. We'll handle this more complex logic in the PHP code.

Once you have successfully created the database and these tables, please let me know. We will then move on to Phase 3: Core Website Development (Frontend & Backend), starting with the basic website structure and database connection.

Nekemte, Ethiopia





yes i have ceated the database. continue


Excellent! That's a crucial first step successfully completed.

Now that your database (doctor_portfolio) and tables (doctor_profile, services, appointments, testimonials) are set up, we can move on to the actual development.

Phase 3: Core Website Development (Frontend & Backend)
In this phase, we'll start building the structure of your website, connecting to the database, and implementing the basic display of information.

Step 4: Project Structure and Database Connection
First, let's create the file structure for your project and set up the basic database connection.

1. Create Project Folder:

Navigate to your web server's document root:

XAMPP: C:\xampp\htdocs\ (Windows) or /Applications/XAMPP/htdocs/ (macOS)

WampServer: C:\wamp\www\

MAMP: /Applications/MAMP/htdocs/

Laragon: C:\laragon\www\ (or wherever you configured it)

Inside this directory, create a new folder for your project. Let's call it dr_portfolio.

Your project path will now look something like: http://localhost/dr_portfolio/

2. Project File Structure:

Inside your dr_portfolio folder, create the following basic structure:

dr_portfolio/
├── config/
│   └── database.php
├── includes/
│   └── header.php
│   └── footer.php
├── css/
│   └── style.css
├── js/
│   └── script.js
├── index.php
├── services.php
├── appointments.php
├── contact.php
├── admin/
│   ├── index.php (Admin dashboard)
│   ├── profile.php (Manage doctor profile)
│   ├── services.php (Manage services)
│   ├── appointments.php (Manage appointments)
│   ├── testimonials.php (Manage testimonials)
│   └── login.php
└── uploads/ (for profile image, etc. - ensure web server has write permissions)
3. Database Connection (config/database.php):

This file will contain the credentials and logic to connect to your MySQL database. Using a separate file for this is a good practice for organization and security.

Create dr_portfolio/config/database.php and add the following code:

PHP

<?php
// config/database.php

define('DB_HOST', 'localhost'); // Your database host (usually 'localhost')
define('DB_USER', 'root');     // Your MySQL username (default for XAMPP/Wamp/MAMP is 'root')
define('DB_PASS', '');         // Your MySQL password (default for XAMPP/Wamp/MAMP is empty)
define('DB_NAME', 'doctor_portfolio'); // The database name we created

// Establish database connection using MySQLi (Recommended over older mysql_ functions)
$conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Set charset to utf8mb4 for proper emoji and special character handling
$conn->set_charset("utf8mb4");

// You can optionally add a function for preparing statements to avoid repetition
function prepare_stmt($sql) {
    global $conn;
    return $conn->prepare($sql);
}

// For demonstration, we'll keep it simple and use $conn directly.
// In a larger application, you might use PDO for more flexibility.
?>
Explanation:

define(): Used to create constants for database credentials. This makes it easy to change them in one place if needed.

mysqli_connect(): The function to establish a connection to MySQL.

$conn->connect_error: Checks if the connection failed and stops the script if it did.

$conn->set_charset("utf8mb4");: Important for handling various characters correctly.

4. Header and Footer Includes (includes/header.php, includes/footer.php):

These files will contain common HTML parts like the navigation bar, head section, and closing body/HTML tags. This helps keep your code DRY (Don't Repeat Yourself).

Create dr_portfolio/includes/header.php:

PHP

<?php
// includes/header.php
// You might start a session here if you plan to use user authentication (for doctor login)
// session_start();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dr. [Your Name] - General Surgeon</title>
    <link rel="stylesheet" href="/dr_portfolio/css/style.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/dr_portfolio/index.php">Dr. [Your Name]</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/dr_portfolio/index.php">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dr_portfolio/services.php">Services</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dr_portfolio/appointments.php">Book Appointment</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dr_portfolio/contact.php">Contact</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/dr_portfolio/admin/login.php">Admin Login</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container mt-4">
    ```

Create `dr_portfolio/includes/footer.php`:

```php
<?php
// includes/footer.php
?>
    </div> <footer class="bg-light text-center text-lg-start mt-5 py-3">
        <div class="container">
            <p>&copy; <?php echo date("Y"); ?> Dr. [Your Name]. All rights reserved.</p>
        </div>
    </footer>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="/dr_portfolio/js/script.js"></script>
</body>
</html>
<?php
// Close database connection at the very end of the request
if (isset($conn)) {
    $conn->close();
}
?>
5. Basic Homepage (index.php):

This will be your main landing page.

Create dr_portfolio/index.php:

PHP

<?php
// index.php - Main Homepage
require_once 'config/database.php'; // Include the database connection

// Fetch doctor's profile data
$doctor_profile = null;
$sql = "SELECT * FROM doctor_profile LIMIT 1"; // LIMIT 1 as there should only be one doctor profile
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    $doctor_profile = $result->fetch_assoc();
}

include 'includes/header.php'; // Include the header
?>

<div class="jumbotron text-center">
    <?php if ($doctor_profile): ?>
        <?php if (!empty($doctor_profile['profile_image_path'])): ?>
            <img src="<?php echo htmlspecialchars($doctor_profile['profile_image_path']); ?>" alt="<?php echo htmlspecialchars($doctor_profile['name']); ?>" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px; object-fit: cover;">
        <?php endif; ?>
        <h1 class="display-4">Welcome to Dr. <?php echo htmlspecialchars($doctor_profile['name']); ?>'s Practice</h1>
        <p class="lead">Specializing in <?php echo htmlspecialchars($doctor_profile['specialty']); ?></p>
        <hr class="my-4">
        <p><?php echo nl2br(htmlspecialchars($doctor_profile['bio'])); ?></p>
        <p class="lead">
            <a class="btn btn-primary btn-lg" href="appointments.php" role="button">Book an Appointment</a>
            <a class="btn btn-outline-primary btn-lg" href="services.php" role="button">Learn More About Services</a>
        </p>
    <?php else: ?>
        <h1 class="display-4">Welcome!</h1>
        <p class="lead">Doctor profile not yet configured. Please access the admin panel to set it up.</p>
        <p class="lead">
            <a class="btn btn-primary btn-lg" href="appointments.php" role="button">Book an Appointment</a>
            <a class="btn btn-outline-primary btn-lg" href="services.php" role="button">Learn More About Services</a>
        </p>
    <?php endif; ?>
</div>

<section class="mb-5">
    <h2>About Dr. <?php echo ($doctor_profile ? htmlspecialchars($doctor_profile['name']) : '[Your Name]'); ?></h2>
    <?php if ($doctor_profile): ?>
        <p><?php echo nl2br(htmlspecialchars($doctor_profile['experience'])); ?></p>
        <h3>Qualifications:</h3>
        <p><?php echo nl2br(htmlspecialchars($doctor_profile['qualifications'])); ?></p>
    <?php else: ?>
        <p>Details about the doctor's experience and qualifications will be displayed here once configured in the admin panel.</p>
    <?php endif; ?>
</section>

<?php include 'includes/footer.php'; // Include the footer ?>
Explanation:

require_once 'config/database.php';: This line includes your database connection script. _once ensures it's only included once, even if called multiple times.

$conn->query($sql): Executes the SQL query to fetch the doctor's profile.

$result->fetch_assoc(): Fetches the result row as an associative array.

htmlspecialchars(): Crucial for security! This converts special characters to HTML entities, preventing Cross-Site Scripting (XSS) attacks when displaying user-generated or database content.

nl2br(): Converts newlines (\n) to HTML <br> tags, useful for displaying multiline text from the database.

6. Basic CSS (css/style.css):

Create dr_portfolio/css/style.css. Add some very basic styling.

CSS

/* css/style.css */
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    background-color: #f4f4f4;
    color: #333;
}

.jumbotron {
    background-color: #fff;
    padding: 3rem;
    border-radius: 0.5rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

footer {
    background-color: #e2e6ea; /* Light grey */
    padding: 1.5rem 0;
    margin-top: 3rem;
    color: #555;
}

/* Add some basic image styling for the profile picture */
.img-fluid.rounded-circle {
    border: 3px solid #007bff; /* Primary color border */
}
7. Test Your Setup:

Open your web browser and navigate to http://localhost/dr_portfolio/.

You should see a basic navigation bar, a "Welcome" section, and a footer.

Initially, the doctor profile section will say "Doctor profile not yet configured..." because the doctor_profile table is empty. This is expected.

Next Steps (Once you confirm Step 4 is working):

Step 5: Admin Login System: Create a simple login for the doctor to access the admin panel.

Step 6: Doctor Profile Management: Allow the doctor to populate their doctor_profile table.

Let me know when you've completed these files and confirmed your homepage loads without errors!






but before that i want to inform you that use for front design html,css javascript and bootstrap, for back end php and mysql, for php dont use any frame work.


Got it! Thank you for the clarification.

Confirmed Technology Stack:

Frontend: HTML, CSS, JavaScript (Vanilla JS or jQuery for convenience), Bootstrap (for responsive design and components).

Backend: PHP (Plain PHP, no frameworks like Laravel or CodeIgniter), MySQL.

This is a perfectly valid approach, especially for learning and understanding the fundamentals. It means we'll be handling routing, form validation, database interactions, and security measures more manually, which gives you a deeper insight into how things work under the hood.

Let's continue with Phase 3: Core Website Development. You've already completed Step 4 (Project Structure and Database Connection) successfully.

Now, we'll implement the administrative login system.

Step 5: Admin Login System
A robust admin login is crucial for the doctor to manage their portfolio and appointments. We'll use PHP sessions for authentication and secure password hashing.

1. Create Admin User (Manual Insertion for now):

Since we don't have a registration form for the admin yet (and usually, there's only one admin user - the doctor), let's manually insert the doctor's login credentials into the users table.

Important: We need a users table for authentication. I missed this in the initial database design, my apologies! Let's create it first.

Action: Create users table

Go to http://localhost/phpmyadmin/, select your doctor_portfolio database, click on the "SQL" tab, and execute the following:

SQL

-- Table: users (for admin login)
CREATE TABLE `users` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `username` VARCHAR(50) NOT NULL UNIQUE,
    `password` VARCHAR(255) NOT NULL, -- Store hashed passwords
    `role` ENUM('admin', 'doctor') DEFAULT 'doctor', -- Or just 'admin' if only one type of administrative user
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP
);
Now, let's insert an initial admin user.

Important: Never store plain text passwords in the database. We will hash the password.
You can generate a password hash using a simple PHP script:

Create a temporary file named generate_hash.php in your dr_portfolio folder:

PHP

<?php
// dr_portfolio/generate_hash.php
$password = 'admin123'; // Choose a strong password for your admin
$hashed_password = password_hash($password, PASSWORD_DEFAULT);
echo "Password: " . $password . "<br>";
echo "Hashed Password: " . $hashed_password;
?>
Navigate to http://localhost/dr_portfolio/generate_hash.php in your browser.

Copy the "Hashed Password" string.

Delete generate_hash.php immediately after use for security.

Now, insert the admin user into the users table using PHPMyAdmin:

In PHPMyAdmin, select the doctor_portfolio database, then click on the users table.

Click the "Insert" tab.

Fill in the fields:

id: Leave empty (auto-increment)

username: admin (or any username you prefer)

password: Paste the hashed password you generated.

role: doctor (or admin)

created_at: Leave empty (default current timestamp)

Click "Go".

You now have a secure admin user!

2. Admin Login Page (admin/login.php):

This page will present the login form and handle the submission.

Create dr_portfolio/admin/login.php:

PHP

<?php
// dr_portfolio/admin/login.php
session_start(); // Start the session at the very beginning

require_once '../config/database.php'; // Adjust path for include

$error_message = '';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';

    if (empty($username) || empty($password)) {
        $error_message = 'Please enter both username and password.';
    } else {
        // Use prepared statements to prevent SQL Injection
        $stmt = $conn->prepare("SELECT id, username, password, role FROM users WHERE username = ? LIMIT 1");
        $stmt->bind_param("s", $username); // 's' for string
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows == 1) {
            $user = $result->fetch_assoc();
            // Verify the hashed password
            if (password_verify($password, $user['password'])) {
                // Password is correct, set session variables
                $_SESSION['user_id'] = $user['id'];
                $_SESSION['username'] = $user['username'];
                $_SESSION['role'] = $user['role']; // Store the role for access control

                // Redirect to admin dashboard
                header("Location: index.php");
                exit();
            } else {
                $error_message = 'Invalid username or password.';
            }
        } else {
            $error_message = 'Invalid username or password.';
        }
        $stmt->close();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - Dr. Portfolio</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css"> <style>
        body {
            background-color: #f8f9fa;
        }
        .login-container {
            max-width: 400px;
            margin: 100px auto;
            padding: 30px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        .login-container h2 {
            margin-bottom: 30px;
            text-align: center;
            color: #007bff;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Admin Login</h2>
        <?php if (!empty($error_message)): ?>
            <div class="alert alert-danger" role="alert">
                <?php echo htmlspecialchars($error_message); ?>
            </div>
        <?php endif; ?>
        <form method="POST" action="login.php">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" class="form-control" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
    </div>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Explanation:

session_start();: Initiates the PHP session, which is necessary to store user data across pages.

require_once '../config/database.php';: Includes the database connection. Notice the ../ to go up one directory from admin/ to dr_portfolio/.

$_SERVER['REQUEST_METHOD'] == 'POST': Checks if the form has been submitted.

Prepared Statements: $conn->prepare(...), $stmt->bind_param(...), $stmt->execute(), $stmt->get_result(): This is the correct and secure way to interact with your database using MySQLi. It separates the SQL query from the data, preventing SQL injection attacks.

password_verify($password, $user['password']): Verifies the entered password against the hashed password stored in the database.

$_SESSION['user_id'], $_SESSION['username'], $_SESSION['role']: Upon successful login, user information is stored in session variables. These will be used to check if a user is logged in and what their role is on subsequent pages.

header("Location: index.php"); exit();: Redirects the user to the admin dashboard (admin/index.php) after successful login. exit() is crucial to stop script execution after a redirect.

3. Admin Dashboard (admin/index.php):

This will be the main page for the doctor after logging in. It will also include the access control logic.

Create dr_portfolio/admin/index.php:

PHP

<?php
// dr_portfolio/admin/index.php - Admin Dashboard
session_start(); // Start the session

// Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php"); // Redirect to login page if not authenticated or not authorized
    exit();
}

require_once '../config/database.php'; // Adjust path for include

// Fetch some data for the dashboard (e.g., pending appointments)
$pending_appointments = [];
$sql = "SELECT id, patient_name, appointment_date, appointment_time, reason_for_visit FROM appointments WHERE status = 'pending' ORDER BY appointment_date ASC, appointment_time ASC LIMIT 5";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $pending_appointments[] = $row;
    }
}

// Include a separate header for admin pages (or modify existing one)
// For now, let's keep it simple and make a specific admin header
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Dr. Portfolio</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white active">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Welcome, <?php echo htmlspecialchars($_SESSION['username']); ?>!</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Admin Dashboard</h1>
                <p>Overview of your practice.</p>

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header bg-warning text-white">
                                Pending Appointments (Next 5)
                            </div>
                            <div class="card-body">
                                <?php if (!empty($pending_appointments)): ?>
                                    <ul class="list-group">
                                        <?php foreach ($pending_appointments as $appointment): ?>
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>
                                                    <strong><?php echo htmlspecialchars($appointment['patient_name']); ?></strong><br>
                                                    <?php echo date('F j, Y', strtotime($appointment['appointment_date'])); ?> at <?php echo date('h:i A', strtotime($appointment['appointment_time'])); ?>
                                                </span>
                                                <a href="appointments.php?view=<?php echo $appointment['id']; ?>" class="btn btn-sm btn-info">View</a>
                                            </li>
                                        <?php endforeach; ?>
                                    </ul>
                                <?php else: ?>
                                    <p class="card-text">No pending appointments.</p>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                    </div>
            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Explanation:

Access Control: The first block of PHP code (if (!isset($_SESSION['user_id']) ...)) is critical. It checks if a user_id exists in the session (meaning they are logged in) and if their role is admin or doctor. If not, they are redirected to login.php. You will need to include this block at the top of every admin-only page.

$_SESSION['username']: Used to display the logged-in user's name.

Sidebar Navigation: Uses Bootstrap's grid system and nav-items for a common admin panel layout.

Dashboard Content: Fetches the top 5 pending appointments to give a quick overview.

4. Admin Logout (admin/logout.php):

Create dr_portfolio/admin/logout.php:

PHP

<?php
// dr_portfolio/admin/logout.php
session_start(); // Start the session

// Unset all session variables
$_SESSION = array();

// Destroy the session
session_destroy();

// Redirect to the login page
header("Location: login.php");
exit();
?>
Explanation:

session_start(): Necessary to access session data.

$_SESSION = array();: Clears all session variables.

session_destroy(): Destroys the session itself.

header("Location: login.php");: Redirects the user back to the login page.

Action: Test the Admin Login

Ensure you created the users table and inserted an admin user with a HASHED password.

Open your browser and go to http://localhost/dr_portfolio/admin/login.php.

Try to log in with the username and password you set up.

If successful, you should be redirected to http://localhost/dr_portfolio/admin/index.php and see the basic admin dashboard.

Try navigating to http://localhost/dr_portfolio/admin/index.php directly without logging in – it should redirect you to login.php.

Test the "Logout" link.

Once you have the admin login and dashboard working, we can proceed to Step 6: Doctor Profile Management, which will allow the doctor to update the information displayed on the public homepage.

Let me know when you've successfully set up the admin login!






fix

Warning: Undefined variable $conn in C:\xampppp\htdocs\dr_portfolio\index.php on line 8



Fatal error: Uncaught Error: Call to a member function query() on null in C:\xampppp\htdocs\dr_portfolio\index.php:8 Stack trace: #0 {main} thrown in C:\xampppp\htdocs\dr_portfolio\index.php on line 8 in the code <?php

// index.php - Main Homepage

require_once 'config/database.php'; // Include the database connection



// Fetch doctor's profile data

$doctor_profile = null;

$sql = "SELECT * FROM doctor_profile LIMIT 1"; // LIMIT 1 as there should only be one doctor profile

$result = $conn->query($sql);



if ($result && $result->num_rows > 0) {

    $doctor_profile = $result->fetch_assoc();

}



include 'includes/header.php'; // Include the header

?>



<div class="jumbotron text-center">

    <?php if ($doctor_profile): ?>

        <?php if (!empty($doctor_profile['profile_image_path'])): ?>

            <img src="<?php echo htmlspecialchars($doctor_profile['profile_image_path']); ?>" alt="<?php echo htmlspecialchars($doctor_profile['name']); ?>" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px; object-fit: cover;">

        <?php endif; ?>

        <h1 class="display-4">Welcome to Dr. <?php echo htmlspecialchars($doctor_profile['name']); ?>'s Practice</h1>

        <p class="lead">Specializing in <?php echo htmlspecialchars($doctor_profile['specialty']); ?></p>

        <hr class="my-4">

        <p><?php echo nl2br(htmlspecialchars($doctor_profile['bio'])); ?></p>

        <p class="lead">

            <a class="btn btn-primary btn-lg" href="appointments.php" role="button">Book an Appointment</a>

            <a class="btn btn-outline-primary btn-lg" href="services.php" role="button">Learn More About Services</a>

        </p>

    <?php else: ?>

        <h1 class="display-4">Welcome!</h1>

        <p class="lead">Doctor profile not yet configured. Please access the admin panel to set it up.</p>

        <p class="lead">

            <a class="btn btn-primary btn-lg" href="appointments.php" role="button">Book an Appointment</a>

            <a class="btn btn-outline-primary btn-lg" href="services.php" role="button">Learn More About Services</a>

        </p>

    <?php endif; ?>

</div>



<section class="mb-5">

    <h2>About Dr. <?php echo ($doctor_profile ? htmlspecialchars($doctor_profile['name']) : '[Your Name]'); ?></h2>

    <?php if ($doctor_profile): ?>

        <p><?php echo nl2br(htmlspecialchars($doctor_profile['experience'])); ?></p>

        <h3>Qualifications:</h3>

        <p><?php echo nl2br(htmlspecialchars($doctor_profile['qualifications'])); ?></p>

    <?php else: ?>

        <p>Details about the doctor's experience and qualifications will be displayed here once configured in the admin panel.</p>

    <?php endif; ?>

</section>



<?php include 'includes/footer.php'; // Include the footer ?>



You're getting that "Undefined variable: $conn" error because when you require_once 'config/database.php';, the $conn variable is created inside that included file's scope. For it to be accessible in index.php, you need to make it available in the global scope or pass it around.

The simplest fix, especially for plain PHP without frameworks, is to declare $conn as global in config/database.php if you want to explicitly access it everywhere without passing it as an argument. However, a cleaner way is to ensure database.php directly defines $conn in the global scope, which it already does with new mysqli(...).

The most likely reason for $conn being null is that the path to database.php is incorrect in your index.php file, or there's an error in database.php itself that prevents $conn from being initialized.

Given your file structure:

dr_portfolio/
├── config/
│   └── database.php
├── includes/
│   └── header.php
│   └── footer.php
├── css/
│   └── style.css
├── js/
│   └── script.js
├── index.php
├── services.php
├── appointments.php
├── contact.php
├── admin/
│   ├── index.php (Admin dashboard)
│   ├── profile.php (Manage doctor profile)
│   ├── services.php (Manage services)
│   ├── appointments.php (Manage appointments)
│   ├── testimonials.php (Manage testimonials)
│   └── login.php
└── uploads/
Your index.php is in the root dr_portfolio/ folder. The config/ folder is a direct child of dr_portfolio/. So, require_once 'config/database.php'; should theoretically be correct.

However, the "Undefined variable $conn" and "Call to a member function query() on null" strongly suggest that database.php either didn't run, or it encountered an error itself preventing $conn from being assigned.

How to Fix It
Let's make sure the database.php file is robust and the inclusion is correct.

1. Verify config/database.php Content:

Double-check that your dr_portfolio/config/database.php file is exactly as I provided:

PHP

<?php
// config/database.php

define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', ''); // Make sure this is correct for your MySQL setup
define('DB_NAME', 'doctor_portfolio');

// Establish database connection using MySQLi
$conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);

// Check connection
if ($conn->connect_error) {
    // It's good practice to log errors, but for development, dying is fine.
    // In production, you'd show a friendly message and log the real error.
    error_log("Database connection failed: " . $conn->connect_error);
    die("Sorry, there was a problem connecting to the database. Please try again later.");
}

// Set charset to utf8mb4
$conn->set_charset("utf8mb4");

// No need for the prepare_stmt function for now unless explicitly used elsewhere
?>
Crucial Check: Is your DB_PASS correct? For XAMPP, WampServer, MAMP defaults, it's often an empty string ''. If you set a root password for MySQL, you must put it here.

2. Ensure Web Server Permissions:

Though less common for . directories, ensure your web server user has read access to the dr_portfolio folder and its contents.

3. Test database.php in Isolation (Debugging Step):

Create a temporary file in your dr_portfolio folder, let's call it test_db.php:

PHP

<?php
// test_db.php
require_once 'config/database.php';

if ($conn) {
    echo "Database connection successful!<br>";
    echo "Connection status: " . $conn->stat;
} else {
    echo "Database connection FAILED.<br>";
}

// Attempt a simple query to ensure functionality
$result = $conn->query("SELECT 1 + 1 AS two");
if ($result) {
    $row = $result->fetch_assoc();
    echo "<br>1 + 1 = " . $row['two'];
} else {
    echo "<br>Simple query failed: " . $conn->error;
}

$conn->close();
?>
Now, navigate to http://localhost/dr_portfolio/test_db.php in your browser.

If you see "Database connection successful!" and "1 + 1 = 2", then your database.php file is working correctly, and the issue might be a very subtle path problem or an environment specific quirk.

If you see an error here, then the problem lies directly within your config/database.php or your MySQL setup. The error message will tell you exactly what's wrong (e.g., incorrect credentials, MySQL server not running). Fix this first.

Assuming test_db.php works, here's the only necessary change for your index.php (though it should already be correct based on the structure):

There's actually no change needed in index.php itself if config/database.php is working correctly and its path is accurate. The require_once statement means that the $conn variable, which is instantiated in database.php at the top level, becomes available in index.php.

The error Call to a member function query() on null means that $conn is null at the point you try to use it. This happens only if database.php failed to create the $conn object, or if it wasn't included at all.

The most common causes for this error are:

MySQL Server Not Running: Double-check your XAMPP/WAMP/MAMP control panel and make sure the MySQL service is started (green light).

Incorrect Database Credentials: Verify DB_USER, DB_PASS, DB_NAME in config/database.php.

Incorrect Path in require_once: While require_once 'config/database.php'; looks correct for index.php, ensure there are no typos in the folder name (config vs configs) or file name (database.php vs db.php).

PHP Error in database.php itself: An error in database.php that causes the script to stop before $conn is assigned will lead to this. The die("Connection failed: " . $conn->connect_error); line should catch connection errors, but other syntax errors might occur silently if PHP error reporting is off.

To ensure PHP errors are visible during development, add these lines at the very top of your index.php (and database.php temporarily if you suspect issues there):

PHP

<?php
// At the very top of your index.php and config/database.php during development
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// ... rest of your code
These lines will force PHP to display all errors, which can be invaluable for debugging. Remember to remove them or set display_errors to 0 for a production environment.

Let me know what you find after running test_db.php or enabling full error reporting! This will help us pinpoint the exact problem.






ok fixed. continue


Excellent! I'm glad you got the database connection resolved. That's a fundamental hurdle, and fixing it means you're good to go.

We've completed:

Step 1: Environment Setup

Step 2: Database Design

Step 3: Database & Initial Table Creation (including the users table fix)

Step 4: Project Structure & Database Connection

Step 5: Admin Login System (including login.php, index.php for admin, and logout.php)

Now, let's move on to populating the doctor's public profile via the admin panel.

Step 6: Doctor Profile Management (Admin Module)
This step will involve creating a form in the admin area where the doctor can input and update all their personal and professional details, which will then be displayed on the public-facing homepage.

1. Create the Profile Management Page (admin/profile.php):

This page will:

Display the current doctor profile data (if any).

Provide a form for editing this data.

Handle image uploads for the profile picture.

Create dr_portfolio/admin/profile.php:

PHP

<?php
// dr_portfolio/admin/profile.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $name = $_POST['name'] ?? '';
    $specialty = $_POST['specialty'] ?? '';
    $qualifications = $_POST['qualifications'] ?? '';
    $experience = $_POST['experience'] ?? '';
    $bio = $_POST['bio'] ?? '';
    $contact_email = $_POST['contact_email'] ?? '';
    $contact_phone = $_POST['contact_phone'] ?? '';
    $clinic_address = $_POST['clinic_address'] ?? '';
    $social_media_links = $_POST['social_media_links'] ?? '';

    $current_profile_image_path = $_POST['current_profile_image_path'] ?? ''; // Hidden field for existing image

    // --- Image Upload Handling ---
    $upload_dir = '../uploads/'; // Directory to store uploaded files (outside web root is safer)
    $profile_image_path = $current_profile_image_path; // Default to existing image

    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] == UPLOAD_ERR_OK) {
        $file_tmp_name = $_FILES['profile_image']['tmp_name'];
        $file_name = basename($_FILES['profile_image']['name']);
        $file_ext = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));
        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];

        if (in_array($file_ext, $allowed_ext)) {
            // Generate a unique file name to prevent overwrites and security issues
            $new_file_name = uniqid('profile_') . '.' . $file_ext;
            $destination_path = $upload_dir . $new_file_name;

            if (move_uploaded_file($file_tmp_name, $destination_path)) {
                $profile_image_path = $destination_path;

                // Optionally, delete old image if a new one is uploaded and old one existed
                if (!empty($current_profile_image_path) && file_exists($current_profile_image_path)) {
                    unlink($current_profile_image_path);
                }
            } else {
                $message = 'Error uploading image.';
                $message_type = 'danger';
            }
        } else {
            $message = 'Invalid file type. Only JPG, JPEG, PNG, GIF are allowed.';
            $message_type = 'danger';
        }
    }

    if (empty($message)) { // Only proceed with DB update if no image upload errors
        // Check if a profile already exists
        $stmt_check = $conn->prepare("SELECT id FROM doctor_profile LIMIT 1");
        $stmt_check->execute();
        $check_result = $stmt_check->get_result();

        if ($check_result->num_rows > 0) {
            // Update existing profile
            $sql = "UPDATE doctor_profile SET 
                    name = ?, specialty = ?, qualifications = ?, experience = ?, bio = ?, 
                    profile_image_path = ?, contact_email = ?, contact_phone = ?, 
                    clinic_address = ?, social_media_links = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        } else {
            // Insert new profile
            $sql = "INSERT INTO doctor_profile (name, specialty, qualifications, experience, bio, 
                                                profile_image_path, contact_email, contact_phone, 
                                                clinic_address, social_media_links) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        }

        if ($stmt->execute()) {
            $message = 'Doctor profile updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating profile: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
        $stmt_check->close(); // Close the check statement too
    }
}

// --- Fetch Doctor Profile Data for Display ---
$doctor_profile = null;
$sql = "SELECT * FROM doctor_profile LIMIT 1";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    $doctor_profile = $result->fetch_assoc();
}

// Prepare default values for the form if no profile exists
$default_name = $doctor_profile['name'] ?? '';
$default_specialty = $doctor_profile['specialty'] ?? 'General Surgery';
$default_qualifications = $doctor_profile['qualifications'] ?? '';
$default_experience = $doctor_profile['experience'] ?? '';
$default_bio = $doctor_profile['bio'] ?? '';
$default_profile_image_path = $doctor_profile['profile_image_path'] ?? '';
$default_contact_email = $doctor_profile['contact_email'] ?? '';
$default_contact_phone = $doctor_profile['contact_phone'] ?? '';
$default_clinic_address = $doctor_profile['clinic_address'] ?? '';
$default_social_media_links = $doctor_profile['social_media_links'] ?? '';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Profile - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Doctor Profile</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Doctor Profile</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <form action="profile.php" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="name">Doctor's Name</label>
                        <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($default_name); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="specialty">Specialty</label>
                        <input type="text" class="form-control" id="specialty" name="specialty" value="<?php echo htmlspecialchars($default_specialty); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="qualifications">Qualifications (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="qualifications" name="qualifications" rows="5"><?php echo htmlspecialchars($default_qualifications); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="experience">Experience (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="experience" name="experience" rows="5"><?php echo htmlspecialchars($default_experience); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="bio">Short Bio (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="bio" name="bio" rows="5"><?php echo htmlspecialchars($default_bio); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="profile_image">Profile Image</label>
                        <input type="file" class="form-control-file" id="profile_image" name="profile_image" accept="image/*">
                        <?php if (!empty($default_profile_image_path)): ?>
                            <small class="form-text text-muted mt-2">Current Image:</small>
                            <img src="<?php echo htmlspecialchars($default_profile_image_path); ?>" alt="Current Profile Image" class="img-thumbnail mt-2" style="max-width: 150px;">
                            <input type="hidden" name="current_profile_image_path" value="<?php echo htmlspecialchars($default_profile_image_path); ?>">
                        <?php endif; ?>
                    </div>
                    <div class="form-group">
                        <label for="contact_email">Contact Email</label>
                        <input type="email" class="form-control" id="contact_email" name="contact_email" value="<?php echo htmlspecialchars($default_contact_email); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="contact_phone">Contact Phone</label>
                        <input type="text" class="form-control" id="contact_phone" name="contact_phone" value="<?php echo htmlspecialchars($default_contact_phone); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="clinic_address">Clinic Address</label>
                        <input type="text" class="form-control" id="clinic_address" name="clinic_address" value="<?php echo htmlspecialchars($default_clinic_address); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="social_media_links">Social Media Links (Comma separated or JSON string)</label>
                        <textarea class="form-control" id="social_media_links" name="social_media_links" rows="3"><?php echo htmlspecialchars($default_social_media_links); ?></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary">Save Profile</button>
                </form>
            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Key Points in admin/profile.php:

Access Control: The session_start() and if (!isset($_SESSION['user_id']) ...) block at the top ensures only logged-in doctors/admins can access this page.

Database Connection: require_once '../config/database.php'; connects to your database.

Form Submission Handling ($_SERVER['REQUEST_METHOD'] == 'POST'):

It retrieves all form fields using $_POST.

Image Upload:

enctype="multipart/form-data" is essential in the HTML <form> tag for file uploads.

$_FILES['profile_image'] is used to access uploaded file information.

Security: It checks for upload errors (UPLOAD_ERR_OK), validates file extension (allowed_ext), and generates a uniqid() for the new filename to prevent naming conflicts and potential directory traversal issues.

move_uploaded_file() moves the temporary uploaded file to your uploads/ directory.

It stores the profile_image_path in the database.

It also handles deleting the old image if a new one is uploaded.

Conditional INSERT/UPDATE: It checks if a doctor profile already exists in the doctor_profile table.

If num_rows > 0, it means a profile exists, so it executes an UPDATE query.

Otherwise, it executes an INSERT query.

Prepared Statements: All database interactions (SELECT, INSERT, UPDATE) use prepared statements ($conn->prepare(), bind_param(), execute()) to prevent SQL injection.

Success/Error Messages: $message and $message_type are used to display feedback to the user.

Data Fetching for Display: Before the HTML, the script fetches the current doctor's profile data (if any) to pre-fill the form fields. This makes it an "edit" form rather than just an "add" form.

htmlspecialchars(): Used extensively when echoing data into HTML to prevent XSS.

nl2br(): Used for multiline text areas like qualifications, experience, bio when displaying them on the public site (not in the form inputs).

../uploads/ path: The image src in HTML needs to be relative to the web root (dr_portfolio/) for the browser to find it. So, if uploads is directly under dr_portfolio, then /dr_portfolio/uploads/ is the path you'll use in the public index.php for img src. In the admin panel, ../uploads/ works because profile.php is inside admin/.

2. Ensure uploads Directory Permissions:

For PHP to be able to move uploaded files, your dr_portfolio/uploads/ directory must be writable by the web server user.

Linux/macOS: Open your terminal, navigate to your dr_portfolio folder (cd /Applications/XAMPP/htdocs/dr_portfolio/). Then run:

Bash

chmod 775 uploads/
# or, for maximum permissiveness (use with caution in production):
# chmod 777 uploads/
Windows: Right-click the uploads folder, go to "Properties" -> "Security" tab. You might need to add or edit permissions for "IIS_IUSRS" or "Everyone" to "Full control" (this can be complex on Windows, often XAMPP handles it, but if you hit errors, this is a common culprit).

3. Test the Profile Management:

Log into your admin panel: http://localhost/dr_portfolio/admin/login.php

Navigate to "Manage Profile" (http://localhost/dr_portfolio/admin/profile.php).

Fill in all the doctor's details.

Upload a profile image.

Click "Save Profile".

You should see a success message.

Now, go to your public homepage: http://localhost/dr_portfolio/index.php. You should see the updated doctor's name, specialty, bio, and profile image!

Once you've successfully tested the profile management and confirmed the public homepage displays the updated information, let me know! We'll then move on to Step 7: Services Management (Admin Module).






please provide code for http://localhost/dr_portfolio/admin/login.php


You got it. Here is the code for dr_portfolio/admin/login.php.

This file handles the display of the login form, processes the form submission, verifies credentials, and manages session creation for the administrative user (the doctor).

PHP

<?php
// dr_portfolio/admin/login.php
session_start(); // Start the session at the very beginning of the script

// Include the database connection file.
// The path 'config/database.php' is relative to the dr_portfolio/admin/ directory,
// so we need '../' to go up one level to the dr_portfolio/ directory,
// then down into the config/ directory.
require_once '../config/database.php';

$error_message = ''; // Initialize an empty variable to store error messages

// Check if the form has been submitted using the POST method
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Sanitize and retrieve username and password from the form submission
    // The '??' operator provides a default empty string if the $_POST variable is not set,
    // preventing 'Undefined index' notices.
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';

    // Basic validation: Check if both fields are not empty
    if (empty($username) || empty($password)) {
        $error_message = 'Please enter both username and password.';
    } else {
        // Use prepared statements to prevent SQL Injection attacks.
        // We select the id, username, password hash, and role for the given username.
        $stmt = $conn->prepare("SELECT id, username, password, role FROM users WHERE username = ? LIMIT 1");

        // 's' indicates that the parameter is a string.
        $stmt->bind_param("s", $username);

        // Execute the prepared statement
        $stmt->execute();

        // Get the result set from the executed statement
        $result = $stmt->get_result();

        // Check if a user with the provided username was found
        if ($result->num_rows == 1) {
            // Fetch the user's data as an associative array
            $user = $result->fetch_assoc();

            // Verify the provided password against the hashed password stored in the database.
            // password_verify() is the correct function for this.
            if (password_verify($password, $user['password'])) {
                // Password is correct! Set session variables for authentication.
                $_SESSION['user_id'] = $user['id'];
                $_SESSION['username'] = $user['username'];
                $_SESSION['role'] = $user['role']; // Store the user's role for access control

                // Redirect the user to the admin dashboard upon successful login.
                // header() must be called before any actual HTML output.
                header("Location: index.php");
                exit(); // Always call exit() after a header redirect to prevent further script execution.
            } else {
                // Password does not match
                $error_message = 'Invalid username or password.';
            }
        } else {
            // No user found with that username
            $error_message = 'Invalid username or password.';
        }
        // Close the prepared statement
        $stmt->close();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - Dr. Portfolio</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        body {
            background-color: #f8f9fa; /* Light background for the login page */
        }
        .login-container {
            max-width: 400px; /* Max width for the login form container */
            margin: 100px auto; /* Center the container horizontally and add top margin */
            padding: 30px; /* Inner padding */
            background-color: #ffffff; /* White background for the form */
            border-radius: 8px; /* Slightly rounded corners */
            box-shadow: 0 0 15px rgba(0,0,0,0.1); /* Subtle shadow for depth */
        }
        .login-container h2 {
            margin-bottom: 30px; /* Space below the heading */
            text-align: center; /* Center the heading text */
            color: #007bff; /* Bootstrap primary blue color */
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Admin Login</h2>
        <?php
        // Display error message if it's not empty
        if (!empty($error_message)): ?>
            <div class="alert alert-danger" role="alert">
                <?php echo htmlspecialchars($error_message); // Sanitize output ?>
            </div>
        <?php endif; ?>
        <form method="POST" action="login.php">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" class="form-control" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
<?php
// Close the database connection at the end of the script.
// This is good practice to free up resources.
if (isset($conn)) {
    $conn->close();
}
?>

Sources





what is username and password to login


For the admin login, the username and password are not hardcoded in the login.php file itself. Instead, you manually inserted them into your doctor_portfolio database, in the users table, during Step 5: Admin Login System.

Here's a reminder of how we set it up:

Username: I suggested admin. You might have chosen a different one.

Password: You generated a hashed password using a temporary generate_hash.php script and then manually inserted that hash into the users table.

The original plain-text password I used for generating the hash was 'admin123'.

So, to log in, you should use:

Username: admin (or whatever username you entered into the users table)

Password: admin123 (or whatever plain-text password you used when generating the hash, before inserting it into the database)

If you've forgotten the specific password you used, you'll need to either:

Generate a new hash: Run the generate_hash.php script again with a new password of your choice, copy the new hash, and then update the password field for the admin user in your users table via PHPMyAdmin.

Check your users table in PHPMyAdmin: You can see the username directly, but the password field will contain the hash, not the plain-text password.

Let me know if you need help generating a new hash and updating the database!






detected error: http://localhost/dr_portfolio/admin/index.php Not Found


Okay, a "Not Found" error (HTTP 404) for http://localhost/dr_portfolio/admin/index.php indicates that the web server (Apache/Nginx) cannot locate the index.php file within the admin directory.

This usually boils down to one of a few common issues:

Incorrect File Path/Name: The file index.php is not actually located at C:\xampppp\htdocs\dr_portfolio\admin\index.php (based on your previous error path) or there's a typo in the filename.

Incorrect Directory Name: The admin folder might be named differently (e.g., Admin, admins, administration). File paths are case-sensitive on some operating systems (like Linux/macOS) but generally not on Windows, but it's good to be precise.

Missing admin Folder: The admin folder itself might not exist inside your dr_portfolio directory.

Web Server Configuration (less likely for a basic setup): Sometimes, server configurations can prevent access to certain directories, but for a default XAMPP/WAMP/MAMP setup, this is rare for a simple index.php.

Let's troubleshoot this step-by-step:

Action Plan:

Verify the admin Folder Exists:

Go to your dr_portfolio project directory in your file explorer:

XAMPP (Windows): C:\xampp\htdocs\dr_portfolio\

XAMPP (macOS): /Applications/XAMPP/htdocs/dr_portfolio/

WampServer: C:\wamp\www\dr_portfolio\

Laragon: C:\laragon\www\dr_portfolio\ (or your custom path)

Confirm there is a sub-folder named admin directly inside dr_portfolio. If not, create it.

Verify index.php Exists in the admin Folder:

Open the admin folder you just located.

Confirm there is a file named index.php inside it.

Double-check the spelling: Is it index.php or Index.php or indx.php? It must be exactly index.php.

If the file is missing, create it and paste the code I provided previously for dr_portfolio/admin/index.php.

Check for Typo in the URL:

You're trying to access http://localhost/dr_portfolio/admin/index.php. Ensure you haven't accidentally typed admn/, admin/index, or similar.

Restart Apache (Optional but Good Practice):

Sometimes, if you've recently moved or created folders, a quick restart of your Apache (or Nginx) service in your XAMPP/WAMP/MAMP control panel can refresh its directory cache. Stop Apache, then start it again.

Once you've checked these points and made any necessary corrections, try accessing http://localhost/dr_portfolio/admin/login.php again, then log in, and it should redirect you to http://localhost/dr_portfolio/admin/index.php.

Please tell me what you find when you check the file system. That's usually the fastest way to resolve a "Not Found" error.






I am using xamp on windows. please provide response based it.


Okay, great! Knowing you're on XAMPP on Windows makes troubleshooting more specific. The steps remain largely the same, but I can guide you precisely on where to look in your Windows file system.

The "Not Found" error (http://localhost/dr_portfolio/admin/index.php) still means your XAMPP's Apache web server can't find that specific file at that exact location.

Let's re-check the common culprits with XAMPP on Windows in mind.

Troubleshooting "Not Found" on XAMPP (Windows)
1. Verify Your Project Root (Important!)

Open your File Explorer.

Navigate to your XAMPP installation directory, which is typically:
C:\xampp\

Inside xampp, go to the htdocs folder:
C:\xampp\htdocs\

Confirm that your dr_portfolio project folder exists directly inside htdocs:
C:\xampp\htdocs\dr_portfolio\

Common mistake: Sometimes people put the project folder one level too deep, like C:\xampp\htdocs\dr_portfolio\dr_portfolio\. If this is the case, your URL should be http://localhost/dr_portfolio/dr_portfolio/admin/index.php. If you want it at http://localhost/dr_portfolio/, then the dr_portfolio folder should be directly inside htdocs.

2. Verify the admin Folder Exists and is Correctly Named:

Inside your dr_portfolio folder, confirm there's a sub-folder named admin:
C:\xampp\htdocs\dr_portfolio\admin\

Check for typos: Make sure it's admin and not Admin, admins, or admn. While Windows file systems are generally case-insensitive for file/folder names, it's best practice to keep them consistent with your code.

3. Verify index.php Exists and is Correctly Named within admin:

Open the admin folder: C:\xampp\htdocs\dr_portfolio\admin\

Confirm that the file index.php exists directly inside this admin folder.

Check for typos: Is it index.php, Index.php, indx.php, or perhaps index.html? It must be exactly index.php.

If the file is missing or incorrectly named, create/rename it and ensure the content is the PHP code I provided for dr_portfolio/admin/index.php.

4. Check for Hidden File Extensions (Rare but Possible):

In File Explorer, go to "View" tab, and make sure "File name extensions" is checked. Sometimes, index.php might accidentally be saved as index.php.txt if you used a basic text editor and didn't manually change the "Save as type" to "All Files".

5. Restart Apache (Just in case):

Open your XAMPP Control Panel.

Find the "Apache" module.

Click the Stop button next to Apache.

Wait a few seconds until it fully stops.

Click the Start button next to Apache again. This refreshes Apache's understanding of the file system.

After performing these checks:

Try accessing http://localhost/dr_portfolio/admin/login.php again.

Log in using your admin username and the plain-text password you used (e.g., admin123).

This should then redirect you to http://localhost/dr_portfolio/admin/index.php. If it still gives a "Not Found" error, please tell me:

The exact path where your index.php file is located (e.g., C:\xampp\htdocs\dr_portfolio\admin\index.php).

Confirm you restarted Apache.

We'll get this sorted!






Ok. I have understood you. the only missing is i haven't create index.php file yet. please provide code for index.php



Show thinking
Okay, my apologies! It seems I provided the code for admin/index.php in the previous step but didn't explicitly ask you to create it as a separate action item. That's my oversight.

You are correct, the "Not Found" error would definitely occur if the file isn't there!

Here is the code for dr_portfolio/admin/index.php again. Please create this file in your dr_portfolio/admin/ directory.

Admin Dashboard (admin/index.php)
This file serves as the main entry point for the doctor after they successfully log in. It includes the crucial access control logic to ensure only authenticated users with the correct role can view it.

File Path: C:\xampp\htdocs\dr_portfolio\admin\index.php

PHP

<?php
// dr_portfolio/admin/index.php - Admin Dashboard
session_start(); // Start the session at the very beginning of the script

// --- Access Control ---
// Check if the user is logged in (i.e., 'user_id' is set in the session)
// AND if their role is either 'admin' or 'doctor'.
// If not, redirect them to the login page and stop script execution.
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php"); // Redirect to the login page
    exit(); // Stop further script execution
}

// Include the database connection file.
// The path '../config/database.php' means: go up one directory from 'admin/'
// to 'dr_portfolio/', then go into the 'config/' directory.
require_once '../config/database.php';

// --- Fetch Data for Dashboard Overview ---
// We'll fetch the next 5 pending appointments to display on the dashboard.
$pending_appointments = []; // Initialize an empty array to hold appointment data
$sql = "SELECT id, patient_name, appointment_date, appointment_time, reason_for_visit 
        FROM appointments 
        WHERE status = 'pending' 
        ORDER BY appointment_date ASC, appointment_time ASC 
        LIMIT 5"; // Order by date and time, limit to 5 results

$result = $conn->query($sql); // Execute the query

// Check if the query was successful and returned any rows
if ($result && $result->num_rows > 0) {
    // Loop through each row and add it to the $pending_appointments array
    while ($row = $result->fetch_assoc()) {
        $pending_appointments[] = $row;
    }
}

// --- HTML Structure for Admin Dashboard ---
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Dr. Portfolio</title>
    <!-- Link to Bootstrap CSS for responsive styling -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Link to your custom stylesheet (adjust path if necessary).
         '../css/style.css' means: go up one directory from 'admin/'
         to 'dr_portfolio/', then go into the 'css/' directory. -->
    <link rel="stylesheet" href="../css/style.css">
    <style>
        /* Custom styles for the admin sidebar */
        .admin-sidebar {
            background-color: #343a40; /* Dark background */
            color: #f8f9fa; /* Light text color */
            padding: 20px;
            height: 100vh; /* Make sidebar take full viewport height */
            position: sticky; /* Keep sidebar fixed when scrolling */
            top: 0;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa; /* Link color */
            padding: 10px 15px;
            border-radius: 5px; /* Rounded corners for links */
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff; /* Highlight on hover */
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff; /* Active link styling */
            color: #fff;
        }
        /* Basic styling for the main content area */
        #page-content-wrapper {
            min-width: 0;
            width: 100%;
        }
        /* Styling for the toggle button (optional, for responsive sidebar) */
        #wrapper.toggled #sidebar-wrapper {
            margin-left: -15rem; /* Hide sidebar */
        }
        @media (min-width: 768px) {
            #sidebar-wrapper {
                margin-left: 0; /* Show sidebar on larger screens */
            }
            #page-content-wrapper {
                min-width: 0;
                width: 100%;
            }
            #wrapper.toggled #sidebar-wrapper {
                margin-left: -15rem;
            }
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <!-- Navigation links for admin section -->
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white active">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <!-- /#sidebar-wrapper -->

        <!-- Page Content -->
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <!-- Button to toggle sidebar on smaller screens -->
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Welcome, <?php echo htmlspecialchars($_SESSION['username']); ?>!</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Admin Dashboard</h1>
                <p>Overview of your practice.</p>

                <div class="row">
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header bg-warning text-white">
                                Pending Appointments (Next 5)
                            </div>
                            <div class="card-body">
                                <?php if (!empty($pending_appointments)): ?>
                                    <ul class="list-group">
                                        <?php foreach ($pending_appointments as $appointment): ?>
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>
                                                    <strong><?php echo htmlspecialchars($appointment['patient_name']); ?></strong><br>
                                                    <?php echo date('F j, Y', strtotime($appointment['appointment_date'])); ?> at <?php echo date('h:i A', strtotime($appointment['appointment_time'])); ?>
                                                </span>
                                                <!-- Link to view details of the appointment (will be implemented later) -->
                                                <a href="appointments.php?view=<?php echo $appointment['id']; ?>" class="btn btn-sm btn-info">View</a>
                                            </li>
                                        <?php endforeach; ?>
                                    </ul>
                                <?php else: ?>
                                    <p class="card-text">No pending appointments.</p>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                    <!-- You can add more dashboard cards here, e.g., total appointments, recent testimonials, etc. -->
                </div>
            </div>
        </div>
        <!-- /#page-content-wrapper -->
    </div>
    <!-- /#wrapper -->

    <!-- Bootstrap core JavaScript -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // JavaScript to toggle the sidebar (for responsive design)
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close the database connection at the end of the script.
if (isset($conn)) {
    $conn->close();
}
?>
Action:

Create the file: Save the code above as index.php inside your dr_portfolio/admin/ folder.

Ensure logout.php is also in admin/: (If you haven't already, make sure dr_portfolio/admin/logout.php exists with the code I provided earlier).

Test:

Go to http://localhost/dr_portfolio/admin/login.php.

Log in with your admin username and password.

You should now be redirected to and see the admin dashboard.

Let me know once you've created this file and successfully accessed the dashboard! Then we can proceed with managing the doctor's profile.






provide for admin/logout.php also



Show thinking
Got it. Absolutely.

Here is the code for dr_portfolio/admin/logout.php. Please create this file in your dr_portfolio/admin/ directory.

Admin Logout (admin/logout.php)
This file is very simple but crucial for securely logging out the administrator. It destroys the current PHP session and redirects the user back to the login page.

File Path: C:\xampp\htdocs\dr_portfolio\admin\logout.php

PHP

<?php
// dr_portfolio/admin/logout.php
session_start(); // Start the session to access session variables

// Unset all session variables.
// This effectively removes all data stored in the current session.
$_SESSION = array();

// If it's desired to kill the session, also delete the session cookie.
// Note: This will destroy the session, and not just the session data!
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

// Destroy the session.
// This removes the session file from the server.
session_destroy();

// Redirect the user to the login page after logging out.
header("Location: login.php");
exit(); // Always call exit() after a header redirect to prevent further script execution.
?>
Action:

Create the file: Save the code above as logout.php inside your dr_portfolio/admin/ folder.

Test:

Log into your admin dashboard (http://localhost/dr_portfolio/admin/index.php).

Click on the "Logout" link in the sidebar.

You should be redirected back to http://localhost/dr_portfolio/admin/login.php.

Once this is confirmed, we are all set with the basic admin login and access control, and we can proceed with Step 6: Doctor Profile Management if you haven't completed it yet.






image is not displayed in dr_portfolio/index.php. please fix



Show thinking
Okay, let's fix the image display issue in dr_portfolio/index.php.

The problem usually stems from how the image path is stored in the database and how it's then used in the src attribute of the <img> tag in your HTML.

Currently, in admin/profile.php, you're likely saving the path relative to the admin/ folder (e.g., ../uploads/my_image.jpg). When index.php (which is in the dr_portfolio root) tries to use this path, ../ tells the browser to go up from dr_portfolio/, resulting in a wrong URL (like http://localhost/uploads/my_image.jpg instead of http://localhost/dr_portfolio/uploads/my_image.jpg).

The solution is to store the image path in the database relative to your project's root folder (dr_portfolio/).

Step 1: Correct admin/profile.php for Image Path Storage
We need to adjust how profile_image_path is assigned when a new image is uploaded in admin/profile.php.

Open dr_portfolio/admin/profile.php and make the following changes:

Find this block (around line 34 or similar):

PHP

            if (move_uploaded_file($file_tmp_name, $destination_path)) {
                $profile_image_path = $destination_path; // This likely stores "../uploads/filename.jpg"
                // ... rest of the code ...
Replace it with this corrected logic:

PHP

            if (move_uploaded_file($file_tmp_name, $destination_path)) {
                // IMPORTANT CHANGE: Store the path relative to the project root (dr_portfolio/)
                // So, it should be 'uploads/unique_filename.ext'
                // Assuming 'dr_portfolio' is your project folder directly in htdocs
                $profile_image_path = 'uploads/' . $new_file_name;

                // Optionally, delete old image if a new one is uploaded and old one existed
                // Make sure current_profile_image_path (from DB) is converted to a server-side path for unlink
                // It's coming from $_POST, which comes from the DB, so it's 'uploads/filename.jpg'
                if (!empty($current_profile_image_path) && strpos($current_profile_image_path, 'uploads/') === 0) { // Check if it's a valid old path
                    $old_server_path_for_unlink = '../' . $current_profile_image_path; // Relative to admin/
                    if (file_exists($old_server_path_for_unlink)) {
                        unlink($old_server_path_for_unlink);
                    }
                }
            } else {
                $message = 'Error uploading image. Please check directory permissions.';
                $message_type = 'danger';
            }
Explanation of changes:

$profile_image_path = 'uploads/' . $new_file_name;: This is the crucial change. Instead of storing the server-side relative path (../uploads/), we now store a path that is relative to the dr_portfolio root (uploads/). This is the correct path for the browser.

Unlink Logic (Deletion of Old Image): I've adjusted the unlink part slightly. Since current_profile_image_path will now come from the database in the format uploads/filename.ext, we need to prepend ../ to it when calling unlink from admin/profile.php to get the correct server-side file system path. I've also added a check strpos($current_profile_image_path, 'uploads/') === 0 to ensure we only try to unlink paths that conform to our expected storage.

Error Message: Improved the error message for image upload.

Step 2: Ensure index.php Uses the Correct Path
Now that profile_image_path in the database will store uploads/my_image.jpg, your index.php file should already be set up to use it correctly without prepending anything extra.

Open dr_portfolio/index.php and verify this line (around line 12):

PHP

            <img src="<?php echo htmlspecialchars($doctor_profile['profile_image_path']); ?>" alt="<?php echo htmlspecialchars($doctor_profile['name']); ?>" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px; object-fit: cover;">
If the profile_image_path in your database now starts with uploads/, then this line is actually correct as is. The browser, seeing http://localhost/dr_portfolio/index.php and src="uploads/my_image.jpg", will correctly resolve it to http://localhost/dr_portfolio/uploads/my_image.jpg.

Step 3: Re-upload an Image
This is critical! The changes to admin/profile.php will only affect new image uploads. Any image paths already in your database from previous attempts will still have the old, incorrect format.

Log in to your admin panel: http://localhost/dr_portfolio/admin/login.php

Go to "Manage Profile".

Upload a new profile image (even if it's the same one you used before). This will trigger the updated saving logic.

Click "Save Profile". You should see a success message.

Step 4: Verify uploads Folder Permissions
Just to be absolutely sure, re-confirm that your dr_portfolio/uploads/ directory has write permissions for XAMPP (Apache).

Navigate to C:\xampp\htdocs\dr_portfolio\ in File Explorer.

Right-click on the uploads folder and select "Properties".

Go to the "Security" tab.

Ensure that the user under which Apache runs (often "IUSR" or "Everyone" for simple XAMPP setups) has "Write" permissions. If not, you may need to edit permissions.

After performing these steps, especially Step 3 (re-uploading the image), refresh your http://localhost/dr_portfolio/index.php page. The image should now display correctly!

Let me know how it goes!






still not fixed. please update the code and fix error: <?php

// dr_portfolio/admin/profile.php

session_start();



// Access control: Check if the user is logged in and is an admin/doctor

if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {

    header("Location: login.php");

    exit();

}



require_once '../config/database.php'; // Adjust path for include



$message = '';

$message_type = ''; // 'success' or 'danger'



// --- Handle Form Submission ---

if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    $name = $_POST['name'] ?? '';

    $specialty = $_POST['specialty'] ?? '';

    $qualifications = $_POST['qualifications'] ?? '';

    $experience = $_POST['experience'] ?? '';

    $bio = $_POST['bio'] ?? '';

    $contact_email = $_POST['contact_email'] ?? '';

    $contact_phone = $_POST['contact_phone'] ?? '';

    $clinic_address = $_POST['clinic_address'] ?? '';

    $social_media_links = $_POST['social_media_links'] ?? '';



    $current_profile_image_path = $_POST['current_profile_image_path'] ?? ''; // Hidden field for existing image



    // --- Image Upload Handling ---

    $upload_dir = '../uploads/'; // Directory to store uploaded files (outside web root is safer)

    $profile_image_path = $current_profile_image_path; // Default to existing image



    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] == UPLOAD_ERR_OK) {

        $file_tmp_name = $_FILES['profile_image']['tmp_name'];

        $file_name = basename($_FILES['profile_image']['name']);

        $file_ext = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));

        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];



        if (in_array($file_ext, $allowed_ext)) {

            // Generate a unique file name to prevent overwrites and security issues

            $new_file_name = uniqid('profile_') . '.' . $file_ext;

            $destination_path = $upload_dir . $new_file_name;

if (move_uploaded_file($file_tmp_name, $destination_path)) {

                // IMPORTANT CHANGE: Store the path relative to the project root (dr_portfolio/)

                // So, it should be 'uploads/unique_filename.ext'

                // Assuming 'dr_portfolio' is your project folder directly in htdocs

                $profile_image_path = 'uploads/' . $new_file_name;



                // Optionally, delete old image if a new one is uploaded and old one existed

                // Make sure current_profile_image_path (from DB) is converted to a server-side path for unlink

                // It's coming from $_POST, which comes from the DB, so it's 'uploads/filename.jpg'

                if (!empty($current_profile_image_path) && strpos($current_profile_image_path, 'uploads/') === 0) { // Check if it's a valid old path

                    $old_server_path_for_unlink = '../' . $current_profile_image_path; // Relative to admin/

                    if (file_exists($old_server_path_for_unlink)) {

                        unlink($old_server_path_for_unlink);

                    }

                }

            } else {

                $message = 'Error uploading image. Please check directory permissions.';

                $message_type = 'danger';

            }



                // Optionally, delete old image if a new one is uploaded and old one existed

                if (!empty($current_profile_image_path) && file_exists($current_profile_image_path)) {

                    unlink($current_profile_image_path);

                }

            } else {

                $message = 'Error uploading image.';

                $message_type = 'danger';

            }

        } else {

            $message = 'Invalid file type. Only JPG, JPEG, PNG, GIF are allowed.';

            $message_type = 'danger';

        }

    }



    if (empty($message)) { // Only proceed with DB update if no image upload errors

        // Check if a profile already exists

        $stmt_check = $conn->prepare("SELECT id FROM doctor_profile LIMIT 1");

        $stmt_check->execute();

        $check_result = $stmt_check->get_result();



        if ($check_result->num_rows > 0) {

            // Update existing profile

            $sql = "UPDATE doctor_profile SET 

                    name = ?, specialty = ?, qualifications = ?, experience = ?, bio = ?, 

                    profile_image_path = ?, contact_email = ?, contact_phone = ?, 

                    clinic_address = ?, social_media_links = ?";

            $stmt = $conn->prepare($sql);

            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,

                               $profile_image_path, $contact_email, $contact_phone,

                               $clinic_address, $social_media_links);

        } else {

            // Insert new profile

            $sql = "INSERT INTO doctor_profile (name, specialty, qualifications, experience, bio, 

                                                profile_image_path, contact_email, contact_phone, 

                                                clinic_address, social_media_links) 

                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            $stmt = $conn->prepare($sql);

            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,

                               $profile_image_path, $contact_email, $contact_phone,

                               $clinic_address, $social_media_links);

        }



        if ($stmt->execute()) {

            $message = 'Doctor profile updated successfully!';

            $message_type = 'success';

        } else {

            $message = 'Error updating profile: ' . $stmt->error;

            $message_type = 'danger';

        }

        $stmt->close();

        $stmt_check->close(); // Close the check statement too

    }

}



// --- Fetch Doctor Profile Data for Display ---

$doctor_profile = null;

$sql = "SELECT * FROM doctor_profile LIMIT 1";

$result = $conn->query($sql);



if ($result && $result->num_rows > 0) {

    $doctor_profile = $result->fetch_assoc();

}



// Prepare default values for the form if no profile exists

$default_name = $doctor_profile['name'] ?? '';

$default_specialty = $doctor_profile['specialty'] ?? 'General Surgery';

$default_qualifications = $doctor_profile['qualifications'] ?? '';

$default_experience = $doctor_profile['experience'] ?? '';

$default_bio = $doctor_profile['bio'] ?? '';

$default_profile_image_path = $doctor_profile['profile_image_path'] ?? '';

$default_contact_email = $doctor_profile['contact_email'] ?? '';

$default_contact_phone = $doctor_profile['contact_phone'] ?? '';

$default_clinic_address = $doctor_profile['clinic_address'] ?? '';

$default_social_media_links = $doctor_profile['social_media_links'] ?? '';



?>

<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Manage Profile - Admin Dashboard</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <link rel="stylesheet" href="../css/style.css">

    <style>

        .admin-sidebar {

            background-color: #343a40;

            color: #f8f9fa;

            padding: 20px;

            height: 100vh;

        }

        .admin-sidebar .nav-link {

            color: #f8f9fa;

            padding: 10px 15px;

            border-radius: 5px;

        }

        .admin-sidebar .nav-link:hover {

            background-color: #007bff;

            color: #fff;

        }

        .admin-sidebar .nav-item.active .nav-link {

            background-color: #007bff;

            color: #fff;

        }

    </style>

</head>

<body>

    <div class="d-flex" id="wrapper">

        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">

            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>

            <div class="list-group list-group-flush">

                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>

                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Profile</a>

                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>

                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>

                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>

                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>

            </div>

        </div>

        <div id="page-content-wrapper" class="flex-grow-1">

            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">

                <div class="container-fluid">

                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>

                    <h5 class="my-2 ml-3">Manage Doctor Profile</h5>

                </div>

            </nav>



            <div class="container-fluid py-4">

                <h1 class="mt-4">Doctor Profile</h1>



                <?php if (!empty($message)): ?>

                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">

                        <?php echo htmlspecialchars($message); ?>

                    </div>

                <?php endif; ?>



                <form action="profile.php" method="POST" enctype="multipart/form-data">

                    <div class="form-group">

                        <label for="name">Doctor's Name</label>

                        <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($default_name); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="specialty">Specialty</label>

                        <input type="text" class="form-control" id="specialty" name="specialty" value="<?php echo htmlspecialchars($default_specialty); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="qualifications">Qualifications (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="qualifications" name="qualifications" rows="5"><?php echo htmlspecialchars($default_qualifications); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="experience">Experience (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="experience" name="experience" rows="5"><?php echo htmlspecialchars($default_experience); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="bio">Short Bio (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="bio" name="bio" rows="5"><?php echo htmlspecialchars($default_bio); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="profile_image">Profile Image</label>

                        <input type="file" class="form-control-file" id="profile_image" name="profile_image" accept="image/*">

                        <?php if (!empty($default_profile_image_path)): ?>

                            <small class="form-text text-muted mt-2">Current Image:</small>

                            <img src="<?php echo htmlspecialchars($default_profile_image_path); ?>" alt="Current Profile Image" class="img-thumbnail mt-2" style="max-width: 150px;">

                            <input type="hidden" name="current_profile_image_path" value="<?php echo htmlspecialchars($default_profile_image_path); ?>">

                        <?php endif; ?>

                    </div>

                    <div class="form-group">

                        <label for="contact_email">Contact Email</label>

                        <input type="email" class="form-control" id="contact_email" name="contact_email" value="<?php echo htmlspecialchars($default_contact_email); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="contact_phone">Contact Phone</label>

                        <input type="text" class="form-control" id="contact_phone" name="contact_phone" value="<?php echo htmlspecialchars($default_contact_phone); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="clinic_address">Clinic Address</label>

                        <input type="text" class="form-control" id="clinic_address" name="clinic_address" value="<?php echo htmlspecialchars($default_clinic_address); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="social_media_links">Social Media Links (Comma separated or JSON string)</label>

                        <textarea class="form-control" id="social_media_links" name="social_media_links" rows="3"><?php echo htmlspecialchars($default_social_media_links); ?></textarea>

                    </div>



                    <button type="submit" class="btn btn-primary">Save Profile</button>

                </form>

            </div>

        </div>

        </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>

        // Optional: Toggle sidebar for smaller screens

        $("#menu-toggle").click(function(e) {

            e.preventDefault();

            $("#wrapper").toggleClass("toggled");

        });

    </script>

</body>

</html>

<?php

// Close database connection

if (isset($conn)) {

    $conn->close();

}

?>



You're absolutely right to point out that it's still not fixed! I see the issue in the code you provided for admin/profile.php. There's a duplicate if block for image handling and an incorrect else clause which is preventing the image from being saved correctly.

Let's clean that up and make sure the paths are handled robustly.

Fixing the Image Upload and Display
The core problem in your admin/profile.php is that the image upload logic has an extra, nested if statement and a misplaced else block that is causing the $profile_image_path to not be set or to be set incorrectly.

We'll streamline the image upload logic and confirm the public index.php also uses the correct path.

1. Correct dr_portfolio/admin/profile.php (Updated Code)
This updated code for admin/profile.php will ensure:

The image path stored in the database is correct for web access (e.g., uploads/image.jpg).

The old image is properly deleted when a new one is uploaded.

Error messages are handled clearly.

Please replace the entire content of your dr_portfolio/admin/profile.php file with the code below:

PHP

<?php
// dr_portfolio/admin/profile.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// Define the server-side path for the uploads directory
// This is the absolute path to your 'uploads' folder in the project root.
// This is the safest way to handle file system operations.
$upload_base_dir = __DIR__ . '/../uploads/'; // E.g., C:\xampp\htdocs\dr_portfolio\uploads\

// Ensure the upload directory exists and is writable
if (!is_dir($upload_base_dir)) {
    mkdir($upload_base_dir, 0775, true); // Create directory if it doesn't exist
}
if (!is_writable($upload_base_dir)) {
    $message = 'Upload directory is not writable. Please check folder permissions.';
    $message_type = 'danger';
}


// --- Handle Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $name = $_POST['name'] ?? '';
    $specialty = $_POST['specialty'] ?? '';
    $qualifications = $_POST['qualifications'] ?? '';
    $experience = $_POST['experience'] ?? '';
    $bio = $_POST['bio'] ?? '';
    $contact_email = $_POST['contact_email'] ?? '';
    $contact_phone = $_POST['contact_phone'] ?? '';
    $clinic_address = $_POST['clinic_address'] ?? '';
    $social_media_links = $_POST['social_media_links'] ?? '';

    // This is the path from the DB (e.g., 'uploads/old_image.jpg')
    $current_profile_image_db_path = $_POST['current_profile_image_path'] ?? '';
    $profile_image_path_for_db = $current_profile_image_db_path; // Default to existing path

    // --- Image Upload Handling ---
    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] == UPLOAD_ERR_OK) {
        $file_tmp_name = $_FILES['profile_image']['tmp_name'];
        $original_file_name = basename($_FILES['profile_image']['name']);
        $file_ext = strtolower(pathinfo($original_file_name, PATHINFO_EXTENSION));
        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];

        if (in_array($file_ext, $allowed_ext)) {
            $new_file_name = uniqid('profile_') . '.' . $file_ext;
            // Server-side path for moving the uploaded file
            $destination_server_path = $upload_base_dir . $new_file_name;

            if (move_uploaded_file($file_tmp_name, $destination_server_path)) {
                // Path to store in the database (relative to project root for web access)
                $profile_image_path_for_db = 'uploads/' . $new_file_name;

                // Delete the old image file if a new one was successfully uploaded
                // and an old image path existed and was valid.
                if (!empty($current_profile_image_db_path) && strpos($current_profile_image_db_path, 'uploads/') === 0) {
                    // Reconstruct the server path of the old image for deletion
                    $old_image_server_path = __DIR__ . '/../' . $current_profile_image_db_path;
                    if (file_exists($old_image_server_path)) {
                        unlink($old_image_server_path);
                    }
                }
            } else {
                $message = 'Error moving uploaded file. Check permissions for: ' . htmlspecialchars($upload_base_dir);
                $message_type = 'danger';
            }
        } else {
            $message = 'Invalid file type. Only JPG, JPEG, PNG, GIF are allowed.';
            $message_type = 'danger';
        }
    }
    // If there was an upload error (not UPLOAD_ERR_OK, e.g., file too large, partial upload)
    else if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] != UPLOAD_ERR_NO_FILE) {
         $message = 'File upload error: ' . $_FILES['profile_image']['error']; // Provides error code
         $message_type = 'danger';
    }


    // Only proceed with DB update if no critical errors occurred (like image upload failure)
    if (empty($message)) {
        // Check if a profile already exists
        $stmt_check = $conn->prepare("SELECT id FROM doctor_profile LIMIT 1");
        $stmt_check->execute();
        $check_result = $stmt_check->get_result();

        if ($check_result->num_rows > 0) {
            // Update existing profile
            $sql = "UPDATE doctor_profile SET
                    name = ?, specialty = ?, qualifications = ?, experience = ?, bio = ?,
                    profile_image_path = ?, contact_email = ?, contact_phone = ?,
                    clinic_address = ?, social_media_links = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path_for_db, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        } else {
            // Insert new profile
            $sql = "INSERT INTO doctor_profile (name, specialty, qualifications, experience, bio,
                                                profile_image_path, contact_email, contact_phone,
                                                clinic_address, social_media_links)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path_for_db, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        }

        if ($stmt->execute()) {
            $message = 'Doctor profile updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating profile: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
        $stmt_check->close();
    }
}

// --- Fetch Doctor Profile Data for Display (after any updates) ---
$doctor_profile = null;
$sql = "SELECT * FROM doctor_profile LIMIT 1";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    $doctor_profile = $result->fetch_assoc();
}

// Prepare default values for the form if no profile exists
$default_name = $doctor_profile['name'] ?? '';
$default_specialty = $doctor_profile['specialty'] ?? 'General Surgery';
$default_qualifications = $doctor_profile['qualifications'] ?? '';
$default_experience = $doctor_profile['experience'] ?? '';
$default_bio = $doctor_profile['bio'] ?? '';
$default_profile_image_path = $doctor_profile['profile_image_path'] ?? ''; // This is the path from DB ('uploads/...')
$default_contact_email = $doctor_profile['contact_email'] ?? '';
$default_contact_phone = $doctor_profile['contact_phone'] ?? '';
$default_clinic_address = $doctor_profile['clinic_address'] ?? '';
$default_social_media_links = $doctor_profile['social_media_links'] ?? '';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Profile - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Doctor Profile</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Doctor Profile</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <form action="profile.php" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="name">Doctor's Name</label>
                        <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($default_name); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="specialty">Specialty</label>
                        <input type="text" class="form-control" id="specialty" name="specialty" value="<?php echo htmlspecialchars($default_specialty); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="qualifications">Qualifications (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="qualifications" name="qualifications" rows="5"><?php echo htmlspecialchars($default_qualifications); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="experience">Experience (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="experience" name="experience" rows="5"><?php echo htmlspecialchars($default_experience); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="bio">Short Bio (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="bio" name="bio" rows="5"><?php echo htmlspecialchars($default_bio); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="profile_image">Profile Image</label>
                        <input type="file" class="form-control-file" id="profile_image" name="profile_image" accept="image/*">
                        <?php if (!empty($default_profile_image_path)): ?>
                            <small class="form-text text-muted mt-2">Current Image:</small>
                            <img src="<?php echo htmlspecialchars($default_profile_image_path); ?>" alt="Current Profile Image" class="img-thumbnail mt-2" style="max-width: 150px;">
                            <input type="hidden" name="current_profile_image_path" value="<?php echo htmlspecialchars($default_profile_image_path); ?>">
                        <?php endif; ?>
                    </div>
                    <div class="form-group">
                        <label for="contact_email">Contact Email</label>
                        <input type="email" class="form-control" id="contact_email" name="contact_email" value="<?php echo htmlspecialchars($default_contact_email); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="contact_phone">Contact Phone</label>
                        <input type="text" class="form-control" id="contact_phone" name="contact_phone" value="<?php echo htmlspecialchars($default_contact_phone); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="clinic_address">Clinic Address</label>
                        <input type="text" class="form-control" id="clinic_address" name="clinic_address" value="<?php echo htmlspecialchars($default_clinic_address); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="social_media_links">Social Media Links (Comma separated or JSON string)</label>
                        <textarea class="form-control" id="social_media_links" name="social_media_links" rows="3"><?php echo htmlspecialchars($default_social_media_links); ?></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary">Save Profile</button>
                </form>
            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
2. Confirm dr_portfolio/index.php (No Change Needed if Correctly Configured)
Given that admin/profile.php will now save paths like uploads/your_image.jpg, your index.php should correctly display the image without changes. The src attribute is already set up to use the path directly from $doctor_profile['profile_image_path'].

Your dr_portfolio/index.php should look like this (focusing on the image part):

PHP

<?php
// index.php - Main Homepage
require_once 'config/database.php'; // Include the database connection

// Fetch doctor's profile data
$doctor_profile = null;
$sql = "SELECT * FROM doctor_profile LIMIT 1"; // LIMIT 1 as there should only be one doctor profile
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    $doctor_profile = $result->fetch_assoc();
}

include 'includes/header.php'; // Include the header
?>

<div class="jumbotron text-center">
    <?php if ($doctor_profile): ?>
        <?php if (!empty($doctor_profile['profile_image_path'])): ?>
            <img src="<?php echo htmlspecialchars($doctor_profile['profile_image_path']); ?>" alt="<?php echo htmlspecialchars($doctor_profile['name']); ?>" class="img-fluid rounded-circle mb-3" style="width: 150px; height: 150px; object-fit: cover;">
        <?php endif; ?>
        <h1 class="display-4">Welcome to Dr. <?php echo htmlspecialchars($doctor_profile['name']); ?>'s Practice</h1>
        </div>

<?php include 'includes/footer.php'; ?>
Critical Steps to Ensure the Fix Works:
Replace admin/profile.php: Make sure you've completely replaced the old code in dr_portfolio/admin/profile.php with the new, corrected version I provided above.

Clear Old Data (Optional but Recommended): If you've uploaded images before with the incorrect path, those old paths are still in your database. For a clean test, you can:

Go to phpMyAdmin, select your doctor_portfolio database, then the doctor_profile table.

Click on the "Empty" tab (or delete the existing row). This will remove the old, incorrect image path.

Ensure uploads Directory Permissions: Double-check that C:\xampp\htdocs\dr_portfolio\uploads\ has write permissions for XAMPP. This is crucial for move_uploaded_file() to work.

RE-UPLOAD THE IMAGE: This is the most important step after updating the code.

Log in to http://localhost/dr_portfolio/admin/login.php.

Go to Manage Profile.

Choose a new image file (or the same one) and upload it again.

Click "Save Profile".

Check Public Page: Go to http://localhost/dr_portfolio/index.php. The image should now appear!

This revised admin/profile.php should correctly store the image path, and the index.php will then be able to load it properly.

Let me know if this finally gets the image showing!






fix and provide full the updated code as profile.php: <?php

// dr_portfolio/admin/profile.php

session_start();



// Access control: Check if the user is logged in and is an admin/doctor

if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {

    header("Location: login.php");

    exit();

}



require_once '../config/database.php'; // Adjust path for include



$message = '';

$message_type = ''; // 'success' or 'danger'



// --- Handle Form Submission ---

if ($_SERVER['REQUEST_METHOD'] == 'POST') {

    $name = $_POST['name'] ?? '';

    $specialty = $_POST['specialty'] ?? '';

    $qualifications = $_POST['qualifications'] ?? '';

    $experience = $_POST['experience'] ?? '';

    $bio = $_POST['bio'] ?? '';

    $contact_email = $_POST['contact_email'] ?? '';

    $contact_phone = $_POST['contact_phone'] ?? '';

    $clinic_address = $_POST['clinic_address'] ?? '';

    $social_media_links = $_POST['social_media_links'] ?? '';



    $current_profile_image_path = $_POST['current_profile_image_path'] ?? ''; // Hidden field for existing image



    // --- Image Upload Handling ---

    $upload_dir = '../uploads/'; // Directory to store uploaded files (outside web root is safer)

    $profile_image_path = $current_profile_image_path; // Default to existing image



    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] == UPLOAD_ERR_OK) {

        $file_tmp_name = $_FILES['profile_image']['tmp_name'];

        $file_name = basename($_FILES['profile_image']['name']);

        $file_ext = strtolower(pathinfo($file_name, PATHINFO_EXTENSION));

        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];



        if (in_array($file_ext, $allowed_ext)) {

            // Generate a unique file name to prevent overwrites and security issues

            $new_file_name = uniqid('profile_') . '.' . $file_ext;

            $destination_path = $upload_dir . $new_file_name;

if (move_uploaded_file($file_tmp_name, $destination_path)) {

                // IMPORTANT CHANGE: Store the path relative to the project root (dr_portfolio/)

                // So, it should be 'uploads/unique_filename.ext'

                // Assuming 'dr_portfolio' is your project folder directly in htdocs

                $profile_image_path = 'uploads/' . $new_file_name;



                // Optionally, delete old image if a new one is uploaded and old one existed

                // Make sure current_profile_image_path (from DB) is converted to a server-side path for unlink

                // It's coming from $_POST, which comes from the DB, so it's 'uploads/filename.jpg'

                if (!empty($current_profile_image_path) && strpos($current_profile_image_path, 'uploads/') === 0) { // Check if it's a valid old path

                    $old_server_path_for_unlink = '../' . $current_profile_image_path; // Relative to admin/

                    if (file_exists($old_server_path_for_unlink)) {

                        unlink($old_server_path_for_unlink);

                    }

                }

            } else {

                $message = 'Error uploading image. Please check directory permissions.';

                $message_type = 'danger';

            }



                // Optionally, delete old image if a new one is uploaded and old one existed

                if (!empty($current_profile_image_path) && file_exists($current_profile_image_path)) {

                    unlink($current_profile_image_path);

                }

            } else {

                $message = 'Error uploading image.';

                $message_type = 'danger';

            }

        } else {

            $message = 'Invalid file type. Only JPG, JPEG, PNG, GIF are allowed.';

            $message_type = 'danger';

        }

    }



    if (empty($message)) { // Only proceed with DB update if no image upload errors

        // Check if a profile already exists

        $stmt_check = $conn->prepare("SELECT id FROM doctor_profile LIMIT 1");

        $stmt_check->execute();

        $check_result = $stmt_check->get_result();



        if ($check_result->num_rows > 0) {

            // Update existing profile

            $sql = "UPDATE doctor_profile SET 

                    name = ?, specialty = ?, qualifications = ?, experience = ?, bio = ?, 

                    profile_image_path = ?, contact_email = ?, contact_phone = ?, 

                    clinic_address = ?, social_media_links = ?";

            $stmt = $conn->prepare($sql);

            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,

                               $profile_image_path, $contact_email, $contact_phone,

                               $clinic_address, $social_media_links);

        } else {

            // Insert new profile

            $sql = "INSERT INTO doctor_profile (name, specialty, qualifications, experience, bio, 

                                                profile_image_path, contact_email, contact_phone, 

                                                clinic_address, social_media_links) 

                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            $stmt = $conn->prepare($sql);

            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,

                               $profile_image_path, $contact_email, $contact_phone,

                               $clinic_address, $social_media_links);

        }



        if ($stmt->execute()) {

            $message = 'Doctor profile updated successfully!';

            $message_type = 'success';

        } else {

            $message = 'Error updating profile: ' . $stmt->error;

            $message_type = 'danger';

        }

        $stmt->close();

        $stmt_check->close(); // Close the check statement too

    }

}



// --- Fetch Doctor Profile Data for Display ---

$doctor_profile = null;

$sql = "SELECT * FROM doctor_profile LIMIT 1";

$result = $conn->query($sql);



if ($result && $result->num_rows > 0) {

    $doctor_profile = $result->fetch_assoc();

}



// Prepare default values for the form if no profile exists

$default_name = $doctor_profile['name'] ?? '';

$default_specialty = $doctor_profile['specialty'] ?? 'General Surgery';

$default_qualifications = $doctor_profile['qualifications'] ?? '';

$default_experience = $doctor_profile['experience'] ?? '';

$default_bio = $doctor_profile['bio'] ?? '';

$default_profile_image_path = $doctor_profile['profile_image_path'] ?? '';

$default_contact_email = $doctor_profile['contact_email'] ?? '';

$default_contact_phone = $doctor_profile['contact_phone'] ?? '';

$default_clinic_address = $doctor_profile['clinic_address'] ?? '';

$default_social_media_links = $doctor_profile['social_media_links'] ?? '';



?>

<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Manage Profile - Admin Dashboard</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <link rel="stylesheet" href="../css/style.css">

    <style>

        .admin-sidebar {

            background-color: #343a40;

            color: #f8f9fa;

            padding: 20px;

            height: 100vh;

        }

        .admin-sidebar .nav-link {

            color: #f8f9fa;

            padding: 10px 15px;

            border-radius: 5px;

        }

        .admin-sidebar .nav-link:hover {

            background-color: #007bff;

            color: #fff;

        }

        .admin-sidebar .nav-item.active .nav-link {

            background-color: #007bff;

            color: #fff;

        }

    </style>

</head>

<body>

    <div class="d-flex" id="wrapper">

        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">

            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>

            <div class="list-group list-group-flush">

                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>

                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Profile</a>

                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>

                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>

                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>

                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>

            </div>

        </div>

        <div id="page-content-wrapper" class="flex-grow-1">

            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">

                <div class="container-fluid">

                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>

                    <h5 class="my-2 ml-3">Manage Doctor Profile</h5>

                </div>

            </nav>



            <div class="container-fluid py-4">

                <h1 class="mt-4">Doctor Profile</h1>



                <?php if (!empty($message)): ?>

                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">

                        <?php echo htmlspecialchars($message); ?>

                    </div>

                <?php endif; ?>



                <form action="profile.php" method="POST" enctype="multipart/form-data">

                    <div class="form-group">

                        <label for="name">Doctor's Name</label>

                        <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($default_name); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="specialty">Specialty</label>

                        <input type="text" class="form-control" id="specialty" name="specialty" value="<?php echo htmlspecialchars($default_specialty); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="qualifications">Qualifications (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="qualifications" name="qualifications" rows="5"><?php echo htmlspecialchars($default_qualifications); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="experience">Experience (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="experience" name="experience" rows="5"><?php echo htmlspecialchars($default_experience); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="bio">Short Bio (HTML allowed for formatting)</label>

                        <textarea class="form-control" id="bio" name="bio" rows="5"><?php echo htmlspecialchars($default_bio); ?></textarea>

                    </div>

                    <div class="form-group">

                        <label for="profile_image">Profile Image</label>

                        <input type="file" class="form-control-file" id="profile_image" name="profile_image" accept="image/*">

                        <?php if (!empty($default_profile_image_path)): ?>

                            <small class="form-text text-muted mt-2">Current Image:</small>

                            <img src="<?php echo htmlspecialchars($default_profile_image_path); ?>" alt="Current Profile Image" class="img-thumbnail mt-2" style="max-width: 150px;">

                            <input type="hidden" name="current_profile_image_path" value="<?php echo htmlspecialchars($default_profile_image_path); ?>">

                        <?php endif; ?>

                    </div>

                    <div class="form-group">

                        <label for="contact_email">Contact Email</label>

                        <input type="email" class="form-control" id="contact_email" name="contact_email" value="<?php echo htmlspecialchars($default_contact_email); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="contact_phone">Contact Phone</label>

                        <input type="text" class="form-control" id="contact_phone" name="contact_phone" value="<?php echo htmlspecialchars($default_contact_phone); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="clinic_address">Clinic Address</label>

                        <input type="text" class="form-control" id="clinic_address" name="clinic_address" value="<?php echo htmlspecialchars($default_clinic_address); ?>" required>

                    </div>

                    <div class="form-group">

                        <label for="social_media_links">Social Media Links (Comma separated or JSON string)</label>

                        <textarea class="form-control" id="social_media_links" name="social_media_links" rows="3"><?php echo htmlspecialchars($default_social_media_links); ?></textarea>

                    </div>



                    <button type="submit" class="btn btn-primary">Save Profile</button>

                </form>

            </div>

        </div>

        </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>

        // Optional: Toggle sidebar for smaller screens

        $("#menu-toggle").click(function(e) {

            e.preventDefault();

            $("#wrapper").toggleClass("toggled");

        });

    </script>

</body>

</html>

<?php

// Close database connection

if (isset($conn)) {

    $conn->close();

}

?>



You're right to follow up! I see the issue in the code you provided for admin/profile.php. The nested if statement for handling image uploads, and especially the misplaced else block, is causing the logic to break. It's creating an incorrect flow where the image path is not reliably set or old images aren't deleted properly.

Let's get this definitively fixed. The key is to simplify and correctly structure the image upload and deletion logic.

Corrected dr_portfolio/admin/profile.php Code
This updated code streamlines the image handling, ensures the path saved in the database is always web-friendly, and manages old image deletion more robustly.

Please completely replace the content of your C:\xampp\htdocs\dr_portfolio\admin\profile.php file with this code:

PHP

<?php
// dr_portfolio/admin/profile.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php';

$message = '';
$message_type = ''; // 'success' or 'danger'

// Define the absolute server-side path for the uploads directory
// This is generally the most robust way to handle file system operations.
// __DIR__ is the directory of the current file (admin/), so ../ goes up to dr_portfolio/ then into uploads/
$upload_base_dir = __DIR__ . '/../uploads/';

// Ensure the upload directory exists and is writable
if (!is_dir($upload_base_dir)) {
    // Attempt to create the directory with read/write/execute permissions for owner and group, read/execute for others
    if (!mkdir($upload_base_dir, 0775, true)) {
        $message = 'Error creating upload directory. Please check file system permissions for: ' . htmlspecialchars($upload_base_dir);
        $message_type = 'danger';
    }
}
// Double check if it's writable after creation attempt or if it already existed
if (!is_writable($upload_base_dir) && empty($message)) { // Don't overwrite existing mkdir error
    $message = 'Upload directory is not writable. Please check folder permissions for: ' . htmlspecialchars($upload_base_dir);
    $message_type = 'danger';
}

// --- Handle Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $name = $_POST['name'] ?? '';
    $specialty = $_POST['specialty'] ?? '';
    $qualifications = $_POST['qualifications'] ?? '';
    $experience = $_POST['experience'] ?? '';
    $bio = $_POST['bio'] ?? '';
    $contact_email = $_POST['contact_email'] ?? '';
    $contact_phone = $_POST['contact_phone'] ?? '';
    $clinic_address = $_POST['clinic_address'] ?? '';
    $social_media_links = $_POST['social_media_links'] ?? '';

    // This is the currently stored path from the DB, sent via hidden field (e.g., 'uploads/old_image.jpg')
    $current_profile_image_db_path = $_POST['current_profile_image_path'] ?? '';
    $profile_image_path_for_db = $current_profile_image_db_path; // Default: keep the existing image path

    // --- Image Upload Processing ---
    // Check if a new file was actually uploaded and without errors
    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] === UPLOAD_ERR_OK) {
        $file_tmp_name = $_FILES['profile_image']['tmp_name'];
        $original_file_name = basename($_FILES['profile_image']['name']);
        $file_ext = strtolower(pathinfo($original_file_name, PATHINFO_EXTENSION));
        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];

        if (in_array($file_ext, $allowed_ext)) {
            $new_file_name = uniqid('profile_') . '.' . $file_ext; // Generate a unique name
            $destination_server_path = $upload_base_dir . $new_file_name; // Absolute path for server-side move

            if (move_uploaded_file($file_tmp_name, $destination_server_path)) {
                // SUCCESSFUL UPLOAD: Update the path that will be stored in the database
                // This path is relative to the project root for web accessibility
                $profile_image_path_for_db = 'uploads/' . $new_file_name;

                // Delete the old image file from the server if a new one was uploaded
                // and a valid old path existed in the database.
                if (!empty($current_profile_image_db_path) && strpos($current_profile_image_db_path, 'uploads/') === 0) {
                    $old_image_server_path = __DIR__ . '/../' . $current_profile_image_db_path; // Reconstruct server path
                    if (file_exists($old_image_server_path)) {
                        unlink($old_image_server_path); // Delete the old file
                    }
                }
            } else {
                $message = 'Failed to move uploaded file. Check directory permissions for ' . htmlspecialchars($upload_base_dir) . '.';
                $message_type = 'danger';
            }
        } else {
            $message = 'Invalid file type. Only JPG, JPEG, PNG, GIF are allowed.';
            $message_type = 'danger';
        }
    }
    // Handle other potential upload errors (e.g., file too large, partial upload)
    else if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] !== UPLOAD_ERR_NO_FILE) {
        $message = 'File upload error: ' . $_FILES['profile_image']['error'] . ' (See PHP upload error codes for details).';
        $message_type = 'danger';
    }


    // Only proceed with DB update if no critical errors (especially image upload problems)
    if (empty($message)) {
        // Check if a profile already exists
        $stmt_check = $conn->prepare("SELECT id FROM doctor_profile LIMIT 1");
        $stmt_check->execute();
        $check_result = $stmt_check->get_result();

        if ($check_result->num_rows > 0) {
            // Update existing profile
            $sql = "UPDATE doctor_profile SET
                    name = ?, specialty = ?, qualifications = ?, experience = ?, bio = ?,
                    profile_image_path = ?, contact_email = ?, contact_phone = ?,
                    clinic_address = ?, social_media_links = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path_for_db, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        } else {
            // Insert new profile
            $sql = "INSERT INTO doctor_profile (name, specialty, qualifications, experience, bio,
                                                profile_image_path, contact_email, contact_phone,
                                                clinic_address, social_media_links)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssssssssss", $name, $specialty, $qualifications, $experience, $bio,
                               $profile_image_path_for_db, $contact_email, $contact_phone,
                               $clinic_address, $social_media_links);
        }

        if ($stmt->execute()) {
            $message = 'Doctor profile updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating profile: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
        $stmt_check->close();
    }
}

// --- Fetch Doctor Profile Data for Display (after any updates) ---
$doctor_profile = null;
$sql = "SELECT * FROM doctor_profile LIMIT 1";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    $doctor_profile = $result->fetch_assoc();
}

// Prepare default values for the form if no profile exists
$default_name = $doctor_profile['name'] ?? '';
$default_specialty = $doctor_profile['specialty'] ?? 'General Surgery';
$default_qualifications = $doctor_profile['qualifications'] ?? '';
$default_experience = $doctor_profile['experience'] ?? '';
$default_bio = $doctor_profile['bio'] ?? '';
// This variable holds the path from the database (e.g., 'uploads/image.jpg')
$default_profile_image_path = $doctor_profile['profile_image_path'] ?? '';
$default_contact_email = $doctor_profile['contact_email'] ?? '';
$default_contact_phone = $doctor_profile['contact_phone'] ?? '';
$default_clinic_address = $doctor_profile['clinic_address'] ?? '';
$default_social_media_links = $doctor_profile['social_media_links'] ?? '';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Profile - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Doctor Profile</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Doctor Profile</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <form action="profile.php" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="name">Doctor's Name</label>
                        <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($default_name); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="specialty">Specialty</label>
                        <input type="text" class="form-control" id="specialty" name="specialty" value="<?php echo htmlspecialchars($default_specialty); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="qualifications">Qualifications (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="qualifications" name="qualifications" rows="5"><?php echo htmlspecialchars($default_qualifications); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="experience">Experience (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="experience" name="experience" rows="5"><?php echo htmlspecialchars($default_experience); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="bio">Short Bio (HTML allowed for formatting)</label>
                        <textarea class="form-control" id="bio" name="bio" rows="5"><?php echo htmlspecialchars($default_bio); ?></textarea>
                    </div>
                    <div class="form-group">
                        <label for="profile_image">Profile Image</label>
                        <input type="file" class="form-control-file" id="profile_image" name="profile_image" accept="image/*">
                        <?php if (!empty($default_profile_image_path)): ?>
                            <small class="form-text text-muted mt-2">Current Image:</small>
                            <img src="<?php echo htmlspecialchars($default_profile_image_path); ?>" alt="Current Profile Image" class="img-thumbnail mt-2" style="max-width: 150px;">
                            <input type="hidden" name="current_profile_image_path" value="<?php echo htmlspecialchars($default_profile_image_path); ?>">
                        <?php endif; ?>
                    </div>
                    <div class="form-group">
                        <label for="contact_email">Contact Email</label>
                        <input type="email" class="form-control" id="contact_email" name="contact_email" value="<?php echo htmlspecialchars($default_contact_email); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="contact_phone">Contact Phone</label>
                        <input type="text" class="form-control" id="contact_phone" name="contact_phone" value="<?php echo htmlspecialchars($default_contact_phone); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="clinic_address">Clinic Address</label>
                        <input type="text" class="form-control" id="clinic_address" name="clinic_address" value="<?php echo htmlspecialchars($default_clinic_address); ?>" required>
                    </div>
                    <div class="form-group">
                        <label for="social_media_links">Social Media Links (Comma separated or JSON string)</label>
                        <textarea class="form-control" id="social_media_links" name="social_media_links" rows="3"><?php echo htmlspecialchars($default_social_media_links); ?></textarea>
                    </div>

                    <button type="submit" class="btn btn-primary">Save Profile</button>
                </form>
            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Important Steps After Updating the Code:
Replace File Content: Make sure you've completely replaced the old code in C:\xampp\htdocs\dr_portfolio\admin\profile.php with the new, corrected version provided above.

Verify uploads Directory:

Go to C:\xampp\htdocs\dr_portfolio\ in your File Explorer.

Ensure there is a folder named uploads directly inside dr_portfolio.

Right-click on the uploads folder -> Properties -> Security tab.

Ensure that the user Apache runs as (often IUSR or Everyone for typical XAMPP setups) has "Write" permissions. If not, grant them.

Clear Existing Profile Data (Recommended for a Clean Start):

Open phpMyAdmin (usually http://localhost/phpmyadmin/).

Select your doctor_portfolio database.

Click on the doctor_profile table.

If there's any existing data, click the "Empty" tab (or check the box next to the row and click "Delete") to clear it. This will remove any old, incorrectly stored image paths.

RE-UPLOAD THE IMAGE: This is crucial! The code changes only affect new uploads.

Log in to your admin panel: http://localhost/dr_portfolio/admin/login.php.

Go to "Manage Profile".

Choose a new image file (even if it's the same image you used before).

Click "Save Profile". You should see a success message.

Check Public Page:

Go to http://localhost/dr_portfolio/index.php. The profile image should now display correctly!

This should resolve the image display issue. Please try these steps, and let me know if the image finally appears!






provide code for admin/services.php


Admin Services (admin/services.php)
This file will allow the administrator to manage the services offered by the doctor. This includes adding new services, editing existing ones, and deleting them. We'll implement a simple CRUD (Create, Read, Update, Delete) interface.

First, let's make sure your database has a services table. If you haven't created it yet, here's the SQL:

SQL

CREATE TABLE services (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Now, here's the code for dr_portfolio/admin/services.php.

File Path: C:\xampp\htdocs\dr_portfolio\admin\services.php

PHP

<?php
// dr_portfolio/admin/services.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Form Submissions (Add, Edit, Delete) ---

// Handle Add/Edit Service
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['submit_service'])) {
    $title = $_POST['title'] ?? '';
    $description = $_POST['description'] ?? '';
    $service_id = $_POST['service_id'] ?? null; // For editing

    if (empty($title) || empty($description)) {
        $message = 'Title and Description cannot be empty.';
        $message_type = 'danger';
    } else {
        if ($service_id) {
            // Update existing service
            $sql = "UPDATE services SET title = ?, description = ? WHERE id = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssi", $title, $description, $service_id);
            if ($stmt->execute()) {
                $message = 'Service updated successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error updating service: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        } else {
            // Add new service
            $sql = "INSERT INTO services (title, description) VALUES (?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ss", $title, $description);
            if ($stmt->execute()) {
                $message = 'Service added successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error adding service: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        }
    }
}

// Handle Delete Service
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {
    $service_id = $_GET['id'];
    $sql = "DELETE FROM services WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $service_id);
    if ($stmt->execute()) {
        $message = 'Service deleted successfully!';
        $message_type = 'success';
        // Redirect to clear the GET parameters after deletion
        header("Location: services.php?message=" . urlencode($message) . "&type=" . $message_type);
        exit();
    } else {
        $message = 'Error deleting service: ' . $stmt->error;
        $message_type = 'danger';
    }
    $stmt->close();
}

// Fetch message from GET parameters if redirected after deletion
if (isset($_GET['message']) && isset($_GET['type'])) {
    $message = htmlspecialchars($_GET['message']);
    $message_type = htmlspecialchars($_GET['type']);
}

// --- Fetch Services for Display ---
$services = [];
$sql = "SELECT * FROM services ORDER BY created_at DESC";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $services[] = $row;
    }
}

// --- Pre-fill form for editing ---
$edit_service = null;
if (isset($_GET['action']) && $_GET['action'] == 'edit' && isset($_GET['id'])) {
    $service_id = $_GET['id'];
    $sql = "SELECT * FROM services WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $service_id);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($result->num_rows > 0) {
        $edit_service = $result->fetch_assoc();
    } else {
        $message = 'Service not found for editing.';
        $message_type = 'danger';
    }
    $stmt->close();
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Services - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Services</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Manage Services</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="card mb-4">
                    <div class="card-header">
                        <?php echo $edit_service ? 'Edit Service' : 'Add New Service'; ?>
                    </div>
                    <div class="card-body">
                        <form action="services.php" method="POST">
                            <?php if ($edit_service): ?>
                                <input type="hidden" name="service_id" value="<?php echo htmlspecialchars($edit_service['id']); ?>">
                            <?php endif; ?>
                            <div class="form-group">
                                <label for="title">Service Title</label>
                                <input type="text" class="form-control" id="title" name="title" value="<?php echo htmlspecialchars($edit_service['title'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="5" required><?php echo htmlspecialchars($edit_service['description'] ?? ''); ?></textarea>
                            </div>
                            <button type="submit" name="submit_service" class="btn btn-primary">
                                <?php echo $edit_service ? 'Update Service' : 'Add Service'; ?>
                            </button>
                            <?php if ($edit_service): ?>
                                <a href="services.php" class="btn btn-secondary ml-2">Cancel Edit</a>
                            <?php endif; ?>
                        </form>
                    </div>
                </div>

                <h2 class="mt-4">Existing Services</h2>
                <?php if (!empty($services)): ?>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Created At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($services as $service): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($service['id']); ?></td>
                                        <td><?php echo htmlspecialchars($service['title']); ?></td>
                                        <td><?php echo nl2br(htmlspecialchars($service['description'])); ?></td>
                                        <td><?php echo htmlspecialchars($service['created_at']); ?></td>
                                        <td>
                                            <a href="services.php?action=edit&id=<?php echo htmlspecialchars($service['id']); ?>" class="btn btn-sm btn-info">Edit</a>
                                            <a href="services.php?action=delete&id=<?php echo htmlspecialchars($service['id']); ?>" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this service?');">Delete</a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php else: ?>
                    <p>No services added yet. Use the form above to add your first service.</p>
                <?php endif; ?>

            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Key Features and How to Use It:
CRUD Operations: You can Create, Read, Update, and Delete services.

Form for Add/Edit: The same form is used for both adding a new service and editing an existing one. If you click "Edit" for a service, the form will be pre-filled with its details.

Dynamic Button Text: The button text changes based on whether you're adding or editing.

Confirmation on Delete: A JavaScript confirm dialog prevents accidental deletions.

Session-based Access Control: Ensures only logged-in administrators or doctors can access this page.

Error/Success Messages: Provides feedback on operations.

Steps to Implement and Test:
Create services Table: If you haven't already, run the SQL query provided at the beginning of this response in your phpMyAdmin for the doctor_portfolio database.

Create services.php: Save the entire code block above as services.php inside your dr_portfolio/admin/ directory.

Log In: Navigate to http://localhost/dr_portfolio/admin/login.php and log in with your admin credentials.

Access Services: Click on "Manage Services" in the sidebar.

Add a Service: Fill out the "Service Title" and "Description" fields and click "Add Service."

Edit a Service: Find an existing service in the list and click its "Edit" button. The form above will populate with its data. Make changes and click "Update Service."

Delete a Service: Click the "Delete" button next to a service. Confirm the deletion in the pop-up.

This file provides a complete solution for managing services from your admin dashboard. Let me know if you encounter any issues!






we have created table services previous as -- Table: servicesCREATE TABLE `services` (

`id` INT AUTO_INCREMENT PRIMARY KEY,

`service_name` VARCHAR(255) NOT NULL,

`description` TEXT,

`duration_minutes` INT DEFAULT NULL,

`price` DECIMAL(10, 2) DEFAULT NULL,

`created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,

`updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP

); try to use it



You're absolutely right to point out the existing services table schema! My apologies for overlooking that. We should definitely use the table as it's already defined with fields like service_name, duration_minutes, and price.

This makes the admin/services.php even more robust as it can manage more detailed service information.

Corrected admin/services.php using your services table schema
This updated code for admin/services.php now correctly interacts with your services table, including the service_name, duration_minutes, and price fields.

Please replace the entire content of your C:\xampp\htdocs\dr_portfolio\admin\services.php file with this code:

PHP

<?php
// dr_portfolio/admin/services.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Form Submissions (Add, Edit, Delete) ---

// Handle Add/Edit Service
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['submit_service'])) {
    $service_name = $_POST['service_name'] ?? '';
    $description = $_POST['description'] ?? '';
    $duration_minutes = $_POST['duration_minutes'] ?? null; // Can be null
    $price = $_POST['price'] ?? null; // Can be null
    $service_id = $_POST['service_id'] ?? null; // For editing

    // Basic validation
    if (empty($service_name) || empty($description)) {
        $message = 'Service Name and Description cannot be empty.';
        $message_type = 'danger';
    } else {
        // Prepare optional fields for DB
        $duration_minutes = ($duration_minutes !== '' && $duration_minutes !== null) ? (int)$duration_minutes : null;
        $price = ($price !== '' && $price !== null) ? (float)$price : null;

        if ($service_id) {
            // Update existing service
            $sql = "UPDATE services SET service_name = ?, description = ?, duration_minutes = ?, price = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
            $stmt = $conn->prepare($sql);
            // 'ssidi' -> string, string, integer, double, integer
            $stmt->bind_param("ssidi", $service_name, $description, $duration_minutes, $price, $service_id);
            if ($stmt->execute()) {
                $message = 'Service updated successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error updating service: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        } else {
            // Add new service
            $sql = "INSERT INTO services (service_name, description, duration_minutes, price) VALUES (?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);
            // 'ssid' -> string, string, integer, double
            $stmt->bind_param("ssid", $service_name, $description, $duration_minutes, $price);
            if ($stmt->execute()) {
                $message = 'Service added successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error adding service: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        }
    }
}

// Handle Delete Service
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {
    $service_id = $_GET['id'];
    $sql = "DELETE FROM services WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $service_id);
    if ($stmt->execute()) {
        $message = 'Service deleted successfully!';
        $message_type = 'success';
        // Redirect to clear the GET parameters after deletion
        header("Location: services.php?message=" . urlencode($message) . "&type=" . $message_type);
        exit();
    } else {
        $message = 'Error deleting service: ' . $stmt->error;
        $message_type = 'danger';
    }
    $stmt->close();
}

// Fetch message from GET parameters if redirected after deletion
if (isset($_GET['message']) && isset($_GET['type'])) {
    $message = htmlspecialchars($_GET['message']);
    $message_type = htmlspecialchars($_GET['type']);
}

// --- Fetch Services for Display ---
$services = [];
$sql = "SELECT * FROM services ORDER BY created_at DESC";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $services[] = $row;
    }
}

// --- Pre-fill form for editing ---
$edit_service = null;
if (isset($_GET['action']) && $_GET['action'] == 'edit' && isset($_GET['id'])) {
    $service_id = $_GET['id'];
    $sql = "SELECT * FROM services WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $service_id);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($result->num_rows > 0) {
        $edit_service = $result->fetch_assoc();
    } else {
        $message = 'Service not found for editing.';
        $message_type = 'danger';
    }
    $stmt->close();
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Services - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Services</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Manage Services</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="card mb-4">
                    <div class="card-header">
                        <?php echo $edit_service ? 'Edit Service' : 'Add New Service'; ?>
                    </div>
                    <div class="card-body">
                        <form action="services.php" method="POST">
                            <?php if ($edit_service): ?>
                                <input type="hidden" name="service_id" value="<?php echo htmlspecialchars($edit_service['id']); ?>">
                            <?php endif; ?>
                            <div class="form-group">
                                <label for="service_name">Service Name</label>
                                <input type="text" class="form-control" id="service_name" name="service_name" value="<?php echo htmlspecialchars($edit_service['service_name'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="5" required><?php echo htmlspecialchars($edit_service['description'] ?? ''); ?></textarea>
                            </div>
                            <div class="form-group">
                                <label for="duration_minutes">Duration (minutes)</label>
                                <input type="number" class="form-control" id="duration_minutes" name="duration_minutes" value="<?php echo htmlspecialchars($edit_service['duration_minutes'] ?? ''); ?>" placeholder="Optional">
                            </div>
                            <div class="form-group">
                                <label for="price">Price ($)</label>
                                <input type="text" class="form-control" id="price" name="price" value="<?php echo htmlspecialchars($edit_service['price'] ?? ''); ?>" placeholder="Optional (e.g., 99.99)">
                            </div>
                            <button type="submit" name="submit_service" class="btn btn-primary">
                                <?php echo $edit_service ? 'Update Service' : 'Add Service'; ?>
                            </button>
                            <?php if ($edit_service): ?>
                                <a href="services.php" class="btn btn-secondary ml-2">Cancel Edit</a>
                            <?php endif; ?>
                        </form>
                    </div>
                </div>

                <h2 class="mt-4">Existing Services</h2>
                <?php if (!empty($services)): ?>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Service Name</th>
                                    <th>Description</th>
                                    <th>Duration</th>
                                    <th>Price</th>
                                    <th>Created At</th>
                                    <th>Updated At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($services as $service): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($service['id']); ?></td>
                                        <td><?php echo htmlspecialchars($service['service_name']); ?></td>
                                        <td><?php echo nl2br(htmlspecialchars($service['description'])); ?></td>
                                        <td><?php echo htmlspecialchars($service['duration_minutes'] ?? 'N/A'); ?></td>
                                        <td><?php echo htmlspecialchars($service['price'] !== null ? '$' . number_format($service['price'], 2) : 'N/A'); ?></td>
                                        <td><?php echo htmlspecialchars($service['created_at']); ?></td>
                                        <td><?php echo htmlspecialchars($service['updated_at']); ?></td>
                                        <td>
                                            <a href="services.php?action=edit&id=<?php echo htmlspecialchars($service['id']); ?>" class="btn btn-sm btn-info">Edit</a>
                                            <a href="services.php?action=delete&id=<?php echo htmlspecialchars($service['id']); ?>" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this service?');">Delete</a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php else: ?>
                    <p>No services added yet. Use the form above to add your first service.</p>
                <?php endif; ?>

            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Important Notes and Testing:
File Location: Ensure this code is saved as C:\xampp\htdocs\dr_portfolio\admin\services.php.

Database Fields:

I've updated the form fields to service_name, duration_minutes, and price.

The bind_param types (ssidi for update, ssid for insert) are adjusted to match your table's data types (string, string, integer, double, integer).

duration_minutes and price are now treated as optional in the form and in the database queries. If the user leaves them blank, they will be inserted/updated as NULL.

Data Display: The table for existing services now includes columns for Duration and Price, formatted appropriately.

Testing:

Log in to your admin panel: http://localhost/dr_portfolio/admin/login.php.

Click on "Manage Services".

Add New Service: Fill in all fields, including duration and price (or leave them blank to test NULL insertion).

Edit Service: Click "Edit" on an existing service. Modify fields and observe the update.

Delete Service: Test the delete functionality.

This version should now seamlessly integrate with your existing services table schema. Let me know how it works!






depend on table we previous created, provide code for admin/appointments.php


You're doing great keeping track of the existing tables! Building on your previously defined appointments table, let's create the admin/appointments.php file.

First, let's confirm the structure of your appointments table. Based on common practice, it should look something like this (if it's different, let me know, and I'll adjust the code):

SQL

CREATE TABLE `appointments` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `patient_name` VARCHAR(255) NOT NULL,
    `patient_email` VARCHAR(255) NOT NULL,
    `patient_phone` VARCHAR(20) DEFAULT NULL,
    `appointment_date` DATE NOT NULL,
    `appointment_time` TIME NOT NULL,
    `service_id` INT DEFAULT NULL, -- Link to your services table
    `message` TEXT,
    `status` ENUM('pending', 'confirmed', 'cancelled', 'completed') DEFAULT 'pending', -- Add status for management
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (`service_id`) REFERENCES `services`(`id`) ON DELETE SET NULL ON UPDATE CASCADE
);
Important: If you don't have the status column or the service_id foreign key yet, I highly recommend adding them. They are crucial for effective appointment management and linking appointments to the services you just created.

Code for dr_portfolio/admin/appointments.php
This code will provide features to:

View all appointments.

Filter appointments by status.

Update an appointment's status (e.g., from 'pending' to 'confirmed').

Delete appointments.

(Optional but recommended: Link to view/edit details, though a full edit form might be complex for this page).

File Path: C:\xampp\htdocs\dr_portfolio\admin\appointments.php

PHP

<?php
// dr_portfolio/admin/appointments.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Actions (Update Status, Delete) ---

// Handle Update Status
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_status'])) {
    $appointment_id = $_POST['appointment_id'] ?? null;
    $new_status = $_POST['new_status'] ?? '';

    if (!empty($appointment_id) && in_array($new_status, ['pending', 'confirmed', 'cancelled', 'completed'])) {
        $sql = "UPDATE appointments SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("si", $new_status, $appointment_id);
        if ($stmt->execute()) {
            $message = 'Appointment status updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating status: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
    } else {
        $message = 'Invalid request for status update.';
        $message_type = 'danger';
    }
}

// Handle Delete Appointment
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {
    $appointment_id = $_GET['id'];
    $sql = "DELETE FROM appointments WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $appointment_id);
    if ($stmt->execute()) {
        $message = 'Appointment deleted successfully!';
        $message_type = 'success';
        // Redirect to clear the GET parameters after deletion
        header("Location: appointments.php?message=" . urlencode($message) . "&type=" . $message_type);
        exit();
    } else {
        $message = 'Error deleting appointment: ' . $stmt->error;
        $message_type = 'danger';
    }
    $stmt->close();
}

// Fetch message from GET parameters if redirected after deletion/update
if (isset($_GET['message']) && isset($_GET['type'])) {
    $message = htmlspecialchars($_GET['message']);
    $message_type = htmlspecialchars($_GET['type']);
}

// --- Fetch Appointments for Display ---
$appointments = [];
$current_filter_status = $_GET['filter_status'] ?? 'all'; // Default filter

$sql = "SELECT a.*, s.service_name FROM appointments a LEFT JOIN services s ON a.service_id = s.id";
$where_clauses = [];
$bind_params = [];
$bind_types = '';

// Apply filter if not 'all'
if ($current_filter_status != 'all') {
    $where_clauses[] = "a.status = ?";
    $bind_params[] = $current_filter_status;
    $bind_types .= 's';
}

if (!empty($where_clauses)) {
    $sql .= " WHERE " . implode(" AND ", $where_clauses);
}

$sql .= " ORDER BY a.appointment_date DESC, a.appointment_time DESC";


$stmt = $conn->prepare($sql);

if (!empty($bind_params)) {
    $stmt->bind_param($bind_types, ...$bind_params);
}

$stmt->execute();
$result = $stmt->get_result();

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $appointments[] = $row;
    }
}
$stmt->close();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Appointments - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
        /* Status Badges */
        .badge-pending { background-color: #ffc107; color: #343a40; } /* Yellow */
        .badge-confirmed { background-color: #28a745; color: #fff; } /* Green */
        .badge-cancelled { background-color: #dc3545; color: #fff; } /* Red */
        .badge-completed { background-color: #6c757d; color: #fff; } /* Gray */
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Appointments</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Manage Appointments</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="mb-3">
                    <form action="appointments.php" method="GET" class="form-inline">
                        <label for="filter_status" class="mr-2">Filter by Status:</label>
                        <select name="filter_status" id="filter_status" class="form-control mr-2" onchange="this.form.submit()">
                            <option value="all" <?php echo ($current_filter_status == 'all') ? 'selected' : ''; ?>>All</option>
                            <option value="pending" <?php echo ($current_filter_status == 'pending') ? 'selected' : ''; ?>>Pending</option>
                            <option value="confirmed" <?php echo ($current_filter_status == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>
                            <option value="cancelled" <?php echo ($current_filter_status == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>
                            <option value="completed" <?php echo ($current_filter_status == 'completed') ? 'selected' : ''; ?>>Completed</option>
                        </select>
                        <noscript><button type="submit" class="btn btn-primary">Filter</button></noscript>
                    </form>
                </div>


                <h2 class="mt-4">All Appointments</h2>
                <?php if (!empty($appointments)): ?>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Patient Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Service</th>
                                    <th>Message</th>
                                    <th>Status</th>
                                    <th>Booked At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($appointments as $appointment): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($appointment['id']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_name']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_email']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_phone'] ?? 'N/A'); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['appointment_date']); ?></td>
                                        <td><?php echo htmlspecialchars(date('h:i A', strtotime($appointment['appointment_time']))); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['service_name'] ?? 'Not specified'); ?></td>
                                        <td><?php echo nl2br(htmlspecialchars($appointment['message'] ?? '')); ?></td>
                                        <td><span class="badge badge-pill badge-<?php echo htmlspecialchars($appointment['status']); ?>"><?php echo ucfirst(htmlspecialchars($appointment['status'])); ?></span></td>
                                        <td><?php echo htmlspecialchars($appointment['created_at']); ?></td>
                                        <td>
                                            <form action="appointments.php" method="POST" class="d-inline-block mr-1">
                                                <input type="hidden" name="appointment_id" value="<?php echo htmlspecialchars($appointment['id']); ?>">
                                                <select name="new_status" class="form-control form-control-sm d-inline-block w-auto" onchange="this.form.submit()">
                                                    <option value="pending" <?php echo ($appointment['status'] == 'pending') ? 'selected' : ''; ?>>Pending</option>
                                                    <option value="confirmed" <?php echo ($appointment['status'] == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>
                                                    <option value="cancelled" <?php echo ($appointment['status'] == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>
                                                    <option value="completed" <?php echo ($appointment['status'] == 'completed') ? 'selected' : ''; ?>>Completed</option>
                                                </select>
                                                <input type="hidden" name="update_status" value="1">
                                            </form>
                                            <a href="appointments.php?action=delete&id=<?php echo htmlspecialchars($appointment['id']); ?>" class="btn btn-sm btn-danger mt-1" onclick="return confirm('Are you sure you want to delete this appointment?');">Delete</a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php else: ?>
                    <p>No appointments found <?php echo ($current_filter_status != 'all') ? 'with status "' . htmlspecialchars($current_filter_status) . '"' : ''; ?>.</p>
                <?php endif; ?>

            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Key Features and How to Use It:
View Appointments: Lists all appointments, pulling in the service_name from the services table using a LEFT JOIN.

Status Management: Each appointment has a dropdown to quickly change its status (pending, confirmed, cancelled, completed). This automatically submits the change.

Status Badges: Visual cues for appointment status using Bootstrap badges.

Filter by Status: A dropdown allows filtering appointments by their status.

Delete Appointment: A "Delete" button with a confirmation prompt.

Error/Success Messages: Provides feedback on operations.

Session-based Access Control: Ensures only logged-in administrators or doctors can access this page.

Steps to Implement and Test:
Confirm appointments Table Schema: Double-check your appointments table schema in phpMyAdmin against the one I provided at the beginning. Crucially, ensure you have the status column and the service_id foreign key. If not, execute the necessary ALTER TABLE statements or recreate your table with the new schema.

If you need to add status:

SQL

ALTER TABLE appointments
ADD COLUMN status ENUM('pending', 'confirmed', 'cancelled', 'completed') DEFAULT 'pending' AFTER message;
If you need to add service_id and the foreign key:

SQL

ALTER TABLE appointments
ADD COLUMN service_id INT DEFAULT NULL AFTER patient_phone;

ALTER TABLE appointments
ADD CONSTRAINT fk_service_id
FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE SET NULL ON UPDATE CASCADE;
Create appointments.php: Save the entire code block above as appointments.php inside your dr_portfolio/admin/ directory.

Log In: Navigate to http://localhost/dr_portfolio/admin/login.php and log in with your admin credentials.

Access Appointments: Click on "Manage Appointments" in the sidebar.

Test Functionality:

If you have existing appointments, try changing their status.

Try deleting an appointment.

Use the "Filter by Status" dropdown to see different sets of appointments.

Manually add a test appointment directly in phpMyAdmin to see it appear here, ensuring to link it to a valid service_id if you have services.

This appointments.php provides a solid foundation for managing your doctor's schedule. Let me know if you need any adjustments or run into any issues!


Sources





depend on table we created previous, provide code for admin/testimonials.php



Show thinking
Okay, let's create the admin/testimonials.php file. This page will allow the administrator to review, approve/reject, edit, and delete patient testimonials.

First, let's assume your testimonials table has a schema similar to this (which is a common and highly recommended structure for managing testimonials):

SQL

CREATE TABLE `testimonials` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `patient_name` VARCHAR(255) NOT NULL,
    `testimonial_text` TEXT NOT NULL,
    `rating` INT DEFAULT NULL, -- Optional: for star ratings (e.g., 1-5)
    `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending', -- For moderation
    `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
    `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
Important: If your testimonials table schema is different, especially regarding the status or rating columns, please let me know, and I will adjust the code accordingly. Having a status column is very important for moderating user-submitted content.

Code for dr_portfolio/admin/testimonials.php
This file will provide the following functionalities:

Display all testimonials with their current status.

Filter testimonials by status (pending, approved, rejected, all).

Approve, reject, or mark testimonials as pending directly from the list.

Edit existing testimonial details (patient name, text, rating).

Delete testimonials.

Allow manual addition of testimonials (in case you want to add some directly).

File Path: C:\xampp\htdocs\dr_portfolio\admin\testimonials.php

PHP

<?php
// dr_portfolio/admin/testimonials.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Form Submissions (Add, Edit, Update Status, Delete) ---

// Handle Add/Edit Testimonial
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['submit_testimonial'])) {
    $patient_name = $_POST['patient_name'] ?? '';
    $testimonial_text = $_POST['testimonial_text'] ?? '';
    $rating = $_POST['rating'] ?? null;
    $status = $_POST['status'] ?? 'pending'; // Default status when adding/editing
    $testimonial_id = $_POST['testimonial_id'] ?? null; // For editing

    // Basic validation
    if (empty($patient_name) || empty($testimonial_text)) {
        $message = 'Patient Name and Testimonial cannot be empty.';
        $message_type = 'danger';
    } else {
        // Ensure rating is an integer or null
        $rating = ($rating !== '' && $rating !== null) ? (int)$rating : null;
        if ($rating < 1 || $rating > 5) {
             $rating = null; // Reset to null if out of range
        }


        if ($testimonial_id) {
            // Update existing testimonial
            $sql = "UPDATE testimonials SET patient_name = ?, testimonial_text = ?, rating = ?, status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
            $stmt = $conn->prepare($sql);
            // 'ssisi' -> string, string, integer, string, integer
            $stmt->bind_param("ssisi", $patient_name, $testimonial_text, $rating, $status, $testimonial_id);
            if ($stmt->execute()) {
                $message = 'Testimonial updated successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error updating testimonial: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        } else {
            // Add new testimonial
            $sql = "INSERT INTO testimonials (patient_name, testimonial_text, rating, status) VALUES (?, ?, ?, ?)";
            $stmt = $conn->prepare($sql);
            // 'ssis' -> string, string, integer, string
            $stmt->bind_param("ssis", $patient_name, $testimonial_text, $rating, $status);
            if ($stmt->execute()) {
                $message = 'Testimonial added successfully!';
                $message_type = 'success';
            } else {
                $message = 'Error adding testimonial: ' . $stmt->error;
                $message_type = 'danger';
            }
            $stmt->close();
        }
    }
}

// Handle Update Status Only (from the list table)
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_status_only'])) {
    $testimonial_id = $_POST['testimonial_id'] ?? null;
    $new_status = $_POST['new_status'] ?? '';

    if (!empty($testimonial_id) && in_array($new_status, ['pending', 'approved', 'rejected'])) {
        $sql = "UPDATE testimonials SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("si", $new_status, $testimonial_id);
        if ($stmt->execute()) {
            $message = 'Testimonial status updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating status: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
    } else {
        $message = 'Invalid request for status update.';
        $message_type = 'danger';
    }
}


// Handle Delete Testimonial
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {
    $testimonial_id = $_GET['id'];
    $sql = "DELETE FROM testimonials WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $testimonial_id);
    if ($stmt->execute()) {
        $message = 'Testimonial deleted successfully!';
        $message_type = 'success';
        // Redirect to clear the GET parameters after deletion
        header("Location: testimonials.php?message=" . urlencode($message) . "&type=" . $message_type);
        exit();
    } else {
        $message = 'Error deleting testimonial: ' . $stmt->error;
        $message_type = 'danger';
    }
    $stmt->close();
}

// Fetch message from GET parameters if redirected after deletion/update
if (isset($_GET['message']) && isset($_GET['type'])) {
    $message = htmlspecialchars($_GET['message']);
    $message_type = htmlspecialchars($_GET['type']);
}

// --- Fetch Testimonials for Display ---
$testimonials = [];
$current_filter_status = $_GET['filter_status'] ?? 'all'; // Default filter

$sql = "SELECT * FROM testimonials";
$where_clauses = [];
$bind_params = [];
$bind_types = '';

// Apply filter if not 'all'
if ($current_filter_status != 'all') {
    $where_clauses[] = "status = ?";
    $bind_params[] = $current_filter_status;
    $bind_types .= 's';
}

if (!empty($where_clauses)) {
    $sql .= " WHERE " . implode(" AND ", $where_clauses);
}

$sql .= " ORDER BY created_at DESC";

$stmt = $conn->prepare($sql);

if (!empty($bind_params)) {
    $stmt->bind_param($bind_types, ...$bind_params);
}

$stmt->execute();
$result = $stmt->get_result();

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $testimonials[] = $row;
    }
}
$stmt->close();

// --- Pre-fill form for editing ---
$edit_testimonial = null;
if (isset($_GET['action']) && $_GET['action'] == 'edit' && isset($_GET['id'])) {
    $testimonial_id = $_GET['id'];
    $sql = "SELECT * FROM testimonials WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $testimonial_id);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($result->num_rows > 0) {
        $edit_testimonial = $result->fetch_assoc();
    } else {
        $message = 'Testimonial not found for editing.';
        $message_type = 'danger';
    }
    $stmt->close();
}

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Testimonials - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
        /* Status Badges */
        .badge-pending { background-color: #ffc107; color: #343a40; } /* Yellow */
        .badge-approved { background-color: #28a745; color: #fff; } /* Green */
        .badge-rejected { background-color: #dc3545; color: #fff; } /* Red */
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Testimonials</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Manage Testimonials</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="card mb-4">
                    <div class="card-header">
                        <?php echo $edit_testimonial ? 'Edit Testimonial' : 'Add New Testimonial'; ?>
                    </div>
                    <div class="card-body">
                        <form action="testimonials.php" method="POST">
                            <?php if ($edit_testimonial): ?>
                                <input type="hidden" name="testimonial_id" value="<?php echo htmlspecialchars($edit_testimonial['id']); ?>">
                            <?php endif; ?>
                            <div class="form-group">
                                <label for="patient_name">Patient Name</label>
                                <input type="text" class="form-control" id="patient_name" name="patient_name" value="<?php echo htmlspecialchars($edit_testimonial['patient_name'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="testimonial_text">Testimonial</label>
                                <textarea class="form-control" id="testimonial_text" name="testimonial_text" rows="5" required><?php echo htmlspecialchars($edit_testimonial['testimonial_text'] ?? ''); ?></textarea>
                            </div>
                            <div class="form-group">
                                <label for="rating">Rating (1-5 Stars)</label>
                                <input type="number" class="form-control" id="rating" name="rating" min="1" max="5" value="<?php echo htmlspecialchars($edit_testimonial['rating'] ?? ''); ?>" placeholder="Optional (1-5)">
                            </div>
                             <div class="form-group">
                                <label for="status">Status</label>
                                <select class="form-control" id="status" name="status" required>
                                    <option value="pending" <?php echo ($edit_testimonial['status'] ?? 'pending') == 'pending' ? 'selected' : ''; ?>>Pending</option>
                                    <option value="approved" <?php echo ($edit_testimonial['status'] ?? '') == 'approved' ? 'selected' : ''; ?>>Approved</option>
                                    <option value="rejected" <?php echo ($edit_testimonial['status'] ?? '') == 'rejected' ? 'selected' : ''; ?>>Rejected</option>
                                </select>
                            </div>
                            <button type="submit" name="submit_testimonial" class="btn btn-primary">
                                <?php echo $edit_testimonial ? 'Update Testimonial' : 'Add Testimonial'; ?>
                            </button>
                            <?php if ($edit_testimonial): ?>
                                <a href="testimonials.php" class="btn btn-secondary ml-2">Cancel Edit</a>
                            <?php endif; ?>
                        </form>
                    </div>
                </div>

                <div class="mb-3">
                    <form action="testimonials.php" method="GET" class="form-inline">
                        <label for="filter_status" class="mr-2">Filter by Status:</label>
                        <select name="filter_status" id="filter_status" class="form-control mr-2" onchange="this.form.submit()">
                            <option value="all" <?php echo ($current_filter_status == 'all') ? 'selected' : ''; ?>>All</option>
                            <option value="pending" <?php echo ($current_filter_status == 'pending') ? 'selected' : ''; ?>>Pending</option>
                            <option value="approved" <?php echo ($current_filter_status == 'approved') ? 'selected' : ''; ?>>Approved</option>
                            <option value="rejected" <?php echo ($current_filter_status == 'rejected') ? 'selected' : ''; ?>>Rejected</option>
                        </select>
                        <noscript><button type="submit" class="btn btn-primary">Filter</button></noscript>
                    </form>
                </div>


                <h2 class="mt-4">Existing Testimonials</h2>
                <?php if (!empty($testimonials)): ?>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Patient Name</th>
                                    <th>Testimonial</th>
                                    <th>Rating</th>
                                    <th>Status</th>
                                    <th>Created At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($testimonials as $testimonial): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($testimonial['id']); ?></td>
                                        <td><?php echo htmlspecialchars($testimonial['patient_name']); ?></td>
                                        <td><?php echo nl2br(htmlspecialchars($testimonial['testimonial_text'])); ?></td>
                                        <td><?php echo htmlspecialchars($testimonial['rating'] ?? 'N/A'); ?></td>
                                        <td><span class="badge badge-pill badge-<?php echo htmlspecialchars($testimonial['status']); ?>"><?php echo ucfirst(htmlspecialchars($testimonial['status'])); ?></span></td>
                                        <td><?php echo htmlspecialchars($testimonial['created_at']); ?></td>
                                        <td>
                                            <form action="testimonials.php" method="POST" class="d-inline-block mr-1">
                                                <input type="hidden" name="testimonial_id" value="<?php echo htmlspecialchars($testimonial['id']); ?>">
                                                <select name="new_status" class="form-control form-control-sm d-inline-block w-auto" onchange="this.form.submit()">
                                                    <option value="pending" <?php echo ($testimonial['status'] == 'pending') ? 'selected' : ''; ?>>Pending</option>
                                                    <option value="approved" <?php echo ($testimonial['status'] == 'approved') ? 'selected' : ''; ?>>Approved</option>
                                                    <option value="rejected" <?php echo ($testimonial['status'] == 'rejected') ? 'selected' : ''; ?>>Rejected</option>
                                                </select>
                                                <input type="hidden" name="update_status_only" value="1">
                                            </form>
                                            <a href="testimonials.php?action=edit&id=<?php echo htmlspecialchars($testimonial['id']); ?>" class="btn btn-sm btn-info mt-1">Edit</a>
                                            <a href="testimonials.php?action=delete&id=<?php echo htmlspecialchars($testimonial['id']); ?>" class="btn btn-sm btn-danger mt-1" onclick="return confirm('Are you sure you want to delete this testimonial?');">Delete</a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php else: ?>
                    <p>No testimonials found <?php echo ($current_filter_status != 'all') ? 'with status "' . htmlspecialchars($current_filter_status) . '"' : ''; ?>.</p>
                <?php endif; ?>

            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>
Steps to Implement and Test:
Confirm testimonials Table Schema:

Open phpMyAdmin.

Select your doctor_portfolio database.

Check the testimonials table structure. Ensure it has patient_name, testimonial_text, rating, status, created_at, and updated_at columns as described.

If any are missing, particularly status and rating, add them using ALTER TABLE statements:

SQL

-- Add rating if missing
ALTER TABLE testimonials
ADD COLUMN rating INT DEFAULT NULL AFTER testimonial_text;

-- Add status if missing
ALTER TABLE testimonials
ADD COLUMN status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending' AFTER rating;
Create testimonials.php: Save the entire code block above as testimonials.php inside your dr_portfolio/admin/ directory.

Log In: Navigate to http://localhost/dr_portfolio/admin/login.php and log in with your admin credentials.

Access Testimonials: Click on "Manage Testimonials" in the sidebar.

Test Functionality:

Add a New Testimonial: Fill out the form fields and click "Add Testimonial."

Change Status: Use the dropdown next to an existing testimonial to change its status (e.g., from "Pending" to "Approved"). Observe the badge color change.

Filter Testimonials: Use the "Filter by Status" dropdown to view only pending, approved, or rejected testimonials.

Edit Testimonial: Click the "Edit" button next to a testimonial. The form will pre-fill. Make changes and click "Update Testimonial."

Delete Testimonial: Click the "Delete" button and confirm the action.

This completes the testimonials management section for your admin dashboard!






provide code for dr_portfolio/services.php



Show thinking
Okay, let's create the public-facing dr_portfolio/services.php page. This page will display the services that the doctor offers, pulling the data directly from the services table in your database.

This page will be accessible to all visitors to your website, so it won't have any admin session checks.

File Path: C:\xampp\htdocs\dr_portfolio\services.php

PHP

<?php
// dr_portfolio/services.php
require_once 'config/database.php'; // Adjust path for include

// --- Fetch Services for Display ---
$services = [];
// Order by service_name or id, depending on preferred display order
$sql = "SELECT id, service_name, description, duration_minutes, price FROM services ORDER BY service_name ASC";
$result = $conn->query($sql);

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $services[] = $row;
    }
}

// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Our Services - Dr. [Doctor's Name]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="css/style.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"> <style>
        .service-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            height: 100%; /* Ensure cards in a row have equal height */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .service-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }
        .service-card h3 {
            color: #007bff;
            margin-bottom: 15px;
            font-weight: 600;
        }
        .service-card p {
            color: #555;
            line-height: 1.6;
            flex-grow: 1; /* Allow description to take up available space */
        }
        .service-details {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px dashed #e9ecef;
        }
        .service-details strong {
            color: #343a40;
        }
        .hero-section {
            background: linear-gradient(rgba(0, 0,0, 0.6), rgba(0, 0, 0, 0.6)), url('img/services-hero.jpg') no-repeat center center/cover; /* Example background */
            color: white;
            padding: 80px 0;
            text-align: center;
            margin-bottom: 40px;
        }
        .hero-section h1 {
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 15px;
        }
        .hero-section p {
            font-size: 1.25rem;
        }
    </style>
</head>
<body>

    <?php include 'includes/header.php'; // Include your header navigation ?>

    <div class="hero-section">
        <div class="container">
            <h1>Our Comprehensive Services</h1>
            <p>Providing expert care across a wide range of medical needs.</p>
        </div>
    </div>

    <main class="container py-5">
        <section id="services-list">
            <h2 class="text-center mb-5">Medical Expertise You Can Trust</h2>

            <?php if (!empty($services)): ?>
                <div class="row">
                    <?php foreach ($services as $service): ?>
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="service-card">
                                <div>
                                    <h3><?php echo htmlspecialchars($service['service_name']); ?></h3>
                                    <p><?php echo nl2br(htmlspecialchars($service['description'])); ?></p>
                                </div>
                                <div class="service-details">
                                    <?php if (!empty($service['duration_minutes'])): ?>
                                        <p><strong>Duration:</strong> <?php echo htmlspecialchars($service['duration_minutes']); ?> minutes</p>
                                    <?php endif; ?>
                                    <?php if (!empty($service['price'])): ?>
                                        <p><strong>Price:</strong> $<?php echo number_format(htmlspecialchars($service['price']), 2); ?></p>
                                    <?php endif; ?>
                                </div>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>
            <?php else: ?>
                <div class="alert alert-info text-center" role="alert">
                    No services are currently listed. Please check back later!
                </div>
            <?php endif; ?>
        </section>

        <section id="call-to-action" class="text-center my-5">
            <h2>Ready to Book an Appointment?</h2>
            <p class="lead">Contact us today to schedule your consultation or treatment.</p>
            <a href="contact.php" class="btn btn-primary btn-lg">Contact Us</a>
        </section>

    </main>

    <?php include 'includes/footer.php'; // Include your footer ?>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    </body>
</html>
Explanation and Setup Steps:
File Location: Save this code as C:\xampp\htdocs\dr_portfolio\services.php.

Database Connection: It uses require_once 'config/database.php'; to connect to your database. Make sure this path is correct relative to services.php.

Fetch Services: The PHP code fetches id, service_name, description, duration_minutes, and price from your services table.

Display Services:

It uses Bootstrap's row and col-lg-4 col-md-6 to create a responsive grid of service cards.

Each service is displayed within a service-card div, showing its name, description, duration, and price.

nl2br() is used for the description to ensure line breaks are displayed correctly in HTML.

number_format() is used for the price to ensure it displays with two decimal places.

Includes (header.php, footer.php):

I've included placeholders for includes/header.php and includes/footer.php. You'll need to create these files if you haven't already. They typically contain your site's navigation, branding, and standard footer content.

Example dr_portfolio/includes/header.php (basic structure):

PHP

<nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
    <div class="container">
        <a class="navbar-brand" href="index.php">Dr. [Doctor's Name]</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="index.php">Home</a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="services.php">Services <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.php">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="testimonials.php">Testimonials</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.php">Contact</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link btn btn-primary text-white ml-2" href="admin/login.php">Admin Login</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
Example dr_portfolio/includes/footer.php (basic structure):

PHP

<footer class="bg-dark text-white text-center py-4 mt-5">
    <div class="container">
        <p>&copy; <?php echo date('Y'); ?> Dr. [Doctor's Name]. All Rights Reserved.</p>
        <p>Designed with <i class="fas fa-heart text-danger"></i> by YourName/Company</p>
    </div>
</footer>
Hero Section: A simple hero section is included at the top for better visual appeal. You might need to add an img/services-hero.jpg if you want a background image, or remove the background-image part of the hero-section style.

CSS: Basic styling is provided within the <style> tags to make the service cards look good. You can customize this further in css/style.css if you prefer.

After creating services.php and ensuring your header.php and footer.php files exist in the includes folder, you can visit http://localhost/dr_portfolio/services.php in your browser to see your listed services!

You stopped this response





provide code for dr_portfolio/appointments.php



Show thinking
Okay, let's create the public-facing dr_portfolio/appointments.php page. This will be the form that patients use to request an appointment with the doctor.

This page will:

Display a form for appointment booking.

Allow patients to select from the services you've defined in your services table.

Collect patient details, preferred date/time, and a message.

Save the appointment request to the appointments table with a 'pending' status by default.

Provide immediate feedback to the user (success/error message).

File Path: C:\xampp\htdocs\dr_portfolio\appointments.php

PHP

<?php
// dr_portfolio/appointments.php
require_once 'config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Fetch Services for Dropdown ---
$services = [];
$sql_services = "SELECT id, service_name, duration_minutes, price FROM services ORDER BY service_name ASC";
$result_services = $conn->query($sql_services);

if ($result_services && $result_services->num_rows > 0) {
    while ($row_service = $result_services->fetch_assoc()) {
        $services[] = $row_service;
    }
}

// --- Handle Appointment Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['submit_appointment'])) {
    $patient_name = filter_var($_POST['patient_name'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $patient_email = filter_var($_POST['patient_email'] ?? '', FILTER_SANITIZE_EMAIL);
    $patient_phone = filter_var($_POST['patient_phone'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $appointment_date = $_POST['appointment_date'] ?? '';
    $appointment_time = $_POST['appointment_time'] ?? '';
    $service_id = filter_var($_POST['service_id'] ?? null, FILTER_VALIDATE_INT);
    $message_text = filter_var($_POST['message'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);

    // Basic validation
    if (empty($patient_name) || empty($patient_email) || empty($appointment_date) || empty($appointment_time)) {
        $message = 'Please fill in all required fields (Name, Email, Date, Time).';
        $message_type = 'danger';
    } elseif (!filter_var($patient_email, FILTER_VALIDATE_EMAIL)) {
        $message = 'Please enter a valid email address.';
        $message_type = 'danger';
    } else {
        // Check if service_id is valid if provided
        $valid_service_id = null;
        if ($service_id !== false && $service_id !== null) {
            foreach ($services as $svc) {
                if ($svc['id'] == $service_id) {
                    $valid_service_id = $service_id;
                    break;
                }
            }
        }

        // Insert into appointments table
        $sql = "INSERT INTO appointments (patient_name, patient_email, patient_phone, appointment_date, appointment_time, service_id, message, status) VALUES (?, ?, ?, ?, ?, ?, ?, 'pending')";
        $stmt = $conn->prepare($sql);

        // 'sssssis' -> string, string, string, string, string, integer, string
        $stmt->bind_param("sssssis", $patient_name, $patient_email, $patient_phone, $appointment_date, $appointment_time, $valid_service_id, $message_text);

        if ($stmt->execute()) {
            $message = 'Your appointment request has been submitted successfully! We will contact you shortly to confirm.';
            $message_type = 'success';
            // Clear form fields after successful submission
            $_POST = array();
        } else {
            $message = 'There was an error submitting your appointment: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
    }
}

// Close database connection for service fetching
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Appointment - Dr. [Doctor's Name]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="css/style.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .form-section {
            padding: 50px 0;
        }
        .form-card {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .hero-section {
            background: linear-gradient(rgba(0, 0,0, 0.6), rgba(0, 0, 0, 0.6)), url('img/appointment-hero.jpg') no-repeat center center/cover; /* Example background */
            color: white;
            padding: 80px 0;
            text-align: center;
            margin-bottom: 40px;
        }
        .hero-section h1 {
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 15px;
        }
        .hero-section p {
            font-size: 1.25rem;
        }
    </style>
</head>
<body>

    <?php include 'includes/header.php'; // Include your header navigation ?>

    <div class="hero-section">
        <div class="container">
            <h1>Book Your Appointment</h1>
            <p>Schedule your visit with Dr. [Doctor's Name] conveniently online.</p>
        </div>
    </div>

    <main class="container form-section">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="form-card">
                    <h2 class="text-center mb-4">Appointment Request Form</h2>

                    <?php if (!empty($message)): ?>
                        <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                            <?php echo htmlspecialchars($message); ?>
                        </div>
                    <?php endif; ?>

                    <form action="appointments.php" method="POST">
                        <div class="form-group">
                            <label for="patient_name">Your Full Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="patient_name" name="patient_name" value="<?php echo htmlspecialchars($_POST['patient_name'] ?? ''); ?>" required>
                        </div>
                        <div class="form-group">
                            <label for="patient_email">Your Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="patient_email" name="patient_email" value="<?php echo htmlspecialchars($_POST['patient_email'] ?? ''); ?>" required>
                        </div>
                        <div class="form-group">
                            <label for="patient_phone">Your Phone Number (Optional)</label>
                            <input type="tel" class="form-control" id="patient_phone" name="patient_phone" value="<?php echo htmlspecialchars($_POST['patient_phone'] ?? ''); ?>">
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="appointment_date">Preferred Date <span class="text-danger">*</span></label>
                                <input type="date" class="form-control" id="appointment_date" name="appointment_date" value="<?php echo htmlspecialchars($_POST['appointment_date'] ?? date('Y-m-d')); ?>" min="<?php echo date('Y-m-d'); ?>" required>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="appointment_time">Preferred Time <span class="text-danger">*</span></label>
                                <input type="time" class="form-control" id="appointment_time" name="appointment_time" value="<?php echo htmlspecialchars($_POST['appointment_time'] ?? ''); ?>" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="service_id">Select Service (Optional)</label>
                            <select class="form-control" id="service_id" name="service_id">
                                <option value="">-- Select a Service --</option>
                                <?php foreach ($services as $service): ?>
                                    <option value="<?php echo htmlspecialchars($service['id']); ?>"
                                        <?php echo (isset($_POST['service_id']) && $_POST['service_id'] == $service['id']) ? 'selected' : ''; ?>>
                                        <?php echo htmlspecialchars($service['service_name']); ?>
                                        <?php if (!empty($service['duration_minutes'])) echo ' (' . htmlspecialchars($service['duration_minutes']) . ' min)'; ?>
                                        <?php if (!empty($service['price'])) echo ' - $' . number_format(htmlspecialchars($service['price']), 2); ?>
                                    </option>
                                <?php endforeach; ?>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="message">Your Message / Notes (Optional)</label>
                            <textarea class="form-control" id="message" name="message" rows="4"><?php echo htmlspecialchars($_POST['message'] ?? ''); ?></textarea>
                        </div>
                        <button type="submit" name="submit_appointment" class="btn btn-primary btn-block">Request Appointment</button>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <?php include 'includes/footer.php'; // Include your footer ?>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    </body>
</html>
Explanation and Setup Steps:
File Location: Save this code as C:\xampp\htdocs\dr_portfolio\appointments.php.

Database Connection: It uses require_once 'config/database.php'; to connect to your database.

Fetch Services:

Before displaying the form, it queries your services table to get a list of available services.

These services are then populated into the "Select Service" dropdown, allowing patients to choose which service they are booking for.

The duration_minutes and price (if available) are also displayed in the dropdown options for clarity.

Form Structure:

Uses Bootstrap classes for a clean, responsive layout.

Input fields for patient_name, patient_email, patient_phone, appointment_date, appointment_time, service_id, and message.

required attributes are used for essential fields, providing basic client-side validation.

min="<?php echo date('Y-m-d'); ?>" on the date input prevents users from selecting past dates.

Form fields retain their values if there's an error after submission, so the user doesn't have to re-enter everything.

Form Submission Handling (PHP):

When the form is submitted via POST, the PHP code:

Sanitizes all incoming data using filter_var() to prevent XSS (Cross-Site Scripting) and other injection attacks.

Performs basic validation to ensure required fields are not empty and the email format is correct.

Inserts the data into your appointments table. The status is hardcoded to 'pending' as this is a new request.

Provides a success or error message to the user.

Clears the form fields upon successful submission.

Includes (header.php, footer.php): Just like services.php, this page includes your includes/header.php and includes/footer.php for consistent navigation and branding.

Hero Section & Styling: A hero section is included for visual appeal, and some basic inline styles are provided for the form card. You can create an img/appointment-hero.jpg or adjust the background image.

Important Considerations & Potential Enhancements:
Date/Time Availability: This form does not check for the doctor's actual availability. It just records a request. A more advanced system would involve:

Showing available slots based on the doctor's schedule.

Preventing double-booking.

Integrating with a calendar system.

This is typically a complex feature for a full-fledged booking system. For now, the admin will manually confirm/adjust these pending appointments.

Confirmation Email: After a successful submission, you might want to send a confirmation email to the patient and/or a notification email to the doctor. This requires additional PHP mailer setup (e.g., PHPMailer library).

Recaptcha: To prevent spam submissions, consider adding Google reCAPTCHA to your form.

After saving the file, visit http://localhost/dr_portfolio/appointments.php in your browser to test the appointment booking form.






also provide code for dr_portfolio/contact.php


Let's set up the public-facing dr_portfolio/contact.php page. This page will serve two main purposes: displaying the doctor's contact information and providing a form for visitors to send messages directly.

This page will:

Show contact details like phone number, email, and address.

Include a contact form for inquiries.

Process form submissions and ideally send an email (we'll simulate this for now, as actual email sending requires more setup).

Provide immediate feedback to the user.

File Path: C:\xampp\htdocs\dr_portfolio\contact.php

PHP

<?php
// dr_portfolio/contact.php
require_once 'config/database.php'; // Required for database connection, even if just for common include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Contact Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['submit_contact'])) {
    $name = filter_var($_POST['name'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $email = filter_var($_POST['email'] ?? '', FILTER_SANITIZE_EMAIL);
    $subject = filter_var($_POST['subject'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
    $message_text = filter_var($_POST['message'] ?? '', FILTER_SANITIZE_FULL_SPECIAL_CHARS);

    // Basic validation
    if (empty($name) || empty($email) || empty($subject) || empty($message_text)) {
        $message = 'Please fill in all required fields.';
        $message_type = 'danger';
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $message = 'Please enter a valid email address.';
        $message_type = 'danger';
    } else {
        // --- IMPORTANT: This is where you would typically send an email ---
        // For demonstration, we'll just show a success message.
        // To send actual emails, you would need a library like PHPMailer
        // and configure it with your SMTP settings.

        $to = 'your_doctors_email@example.com'; // Replace with the doctor's actual email
        $email_subject = "New Contact Form Submission: " . $subject;
        $email_body = "You have received a new message from your website contact form.\n\n" .
                      "Name: " . $name . "\n" .
                      "Email: " . $email . "\n" .
                      "Subject: " . $subject . "\n" .
                      "Message:\n" . $message_text;

        $headers = "From: webmaster@yourwebsite.com\r\n"; // Replace with your website's email
        $headers .= "Reply-To: " . $email . "\r\n";
        $headers .= "Content-type: text/plain; charset=UTF-8\r\n";

        // Uncomment the line below to try sending an actual email using PHP's mail() function.
        // Note: mail() might require specific server configurations (like an SMTP server) to work.
        // if (mail($to, $email_subject, $email_body, $headers)) {
        //     $message = 'Your message has been sent successfully! We will get back to you shortly.';
        //     $message_type = 'success';
        //     $_POST = array(); // Clear form
        // } else {
        //     $message = 'There was an error sending your message. Please try again later or contact us directly.';
        //     $message_type = 'danger';
        // }

        // --- Simulated success for now ---
        $message = 'Your message has been sent successfully! (Simulated)';
        $message_type = 'success';
        $_POST = array(); // Clear form fields after successful submission (simulated)
    }
}

// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Us - Dr. [Doctor's Name]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="css/style.css"> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"> <style>
        .contact-info-section, .contact-form-section {
            padding: 50px 0;
        }
        .info-card {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            text-align: center;
        }
        .info-card i {
            font-size: 2.5rem;
            color: #007bff;
            margin-bottom: 15px;
        }
        .info-card h4 {
            color: #343a40;
            margin-bottom: 10px;
            font-weight: 600;
        }
        .info-card p {
            color: #555;
            margin-bottom: 0;
        }
        .form-card {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .hero-section {
            background: linear-gradient(rgba(0, 0,0, 0.6), rgba(0, 0, 0, 0.6)), url('img/contact-hero.jpg') no-repeat center center/cover; /* Example background */
            color: white;
            padding: 80px 0;
            text-align: center;
            margin-bottom: 40px;
        }
        .hero-section h1 {
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 15px;
        }
        .hero-section p {
            font-size: 1.25rem;
        }
    </style>
</head>
<body>

    <?php include 'includes/header.php'; // Include your header navigation ?>

    <div class="hero-section">
        <div class="container">
            <h1>Get in Touch</h1>
            <p>We're here to answer your questions and provide the care you need.</p>
        </div>
    </div>

    <main class="container py-5">
        <section class="contact-info-section">
            <h2 class="text-center mb-5">Our Contact Information</h2>
            <div class="row text-center">
                <div class="col-md-4">
                    <div class="info-card">
                        <i class="fas fa-phone-alt"></i>
                        <h4>Phone Number</h4>
                        <p><a href="tel:+1234567890">+1 (234) 567-890</a></p>
                        <p><small>Mon-Fri, 9am-5pm</small></p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="info-card">
                        <i class="fas fa-envelope"></i>
                        <h4>Email Address</h4>
                        <p><a href="mailto:info@yourdoctorsclinic.com">info@yourdoctorsclinic.com</a></p>
                        <p><small>We respond within 24 hours</small></p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="info-card">
                        <i class="fas fa-map-marker-alt"></i>
                        <h4>Our Location</h4>
                        <p>123 Medical Drive, Suite 456</p>
                        <p>Cityville, State 12345</p>
                        <p><small><a href="https://www.google.com/maps?q=123+Medical+Drive,Cityville" target="_blank">Get Directions</a></small></p>
                    </div>
                </div>
            </div>
        </section>

        <section class="contact-form-section">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="form-card">
                        <h2 class="text-center mb-4">Send Us a Message</h2>

                        <?php if (!empty($message)): ?>
                            <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                                <?php echo htmlspecialchars($message); ?>
                            </div>
                        <?php endif; ?>

                        <form action="contact.php" method="POST">
                            <div class="form-group">
                                <label for="name">Your Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="name" name="name" value="<?php echo htmlspecialchars($_POST['name'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="email">Your Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="email" name="email" value="<?php echo htmlspecialchars($_POST['email'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="subject">Subject <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="subject" name="subject" value="<?php echo htmlspecialchars($_POST['subject'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="message">Your Message <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="message" name="message" rows="6" required><?php echo htmlspecialchars($_POST['message'] ?? ''); ?></textarea>
                            </div>
                            <button type="submit" name="submit_contact" class="btn btn-primary btn-block">Send Message</button>
                        </form>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <?php include 'includes/footer.php'; // Include your footer ?>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
Explanation and Setup Steps:
File Location: Save this code as C:\xampp\htdocs\dr_portfolio\contact.php.

Contact Information Section:

This section prominently displays static contact details like phone, email, and a physical address.

I've used Font Awesome icons (fas fa-phone-alt, fas fa-envelope, fas fa-map-marker-alt) to make it visually appealing. Make sure Font Awesome CSS is linked in your <head> (it's already included in the provided code).

Replace the placeholder information (+1 (234) 567-890, info@yourdoctorsclinic.com, 123 Medical Drive, Suite 456, Cityville, State 12345) with the doctor's actual contact details.

The "Get Directions" link uses a Google Maps query, which you should also update with the exact address.

Contact Form Section:

A standard contact form with fields for Name, Email, Subject, and Message.

All fields are marked as required.

PHP handles the form submission:

It sanitizes all input using filter_var() to prevent common web vulnerabilities.

It performs basic validation (checks for empty fields and valid email format).

Email Sending (Simulated):

The PHP mail() function is commented out by default. To make the form actually send emails, you would uncomment that section.

Crucially, you must replace 'your_doctors_email@example.com' and 'webmaster@yourwebsite.com' with actual email addresses.

Note on mail(): The mail() function's success depends on your server's configuration (e.g., if XAMPP's Apache has an SMTP server configured or is linked to one). For production, it's highly recommended to use a more robust PHP mailing library like PHPMailer which handles SMTP authentication and more complex email sending reliably.

For immediate testing, I've implemented a simulated success message.

Includes (header.php, footer.php):

As with other public pages, this file includes your includes/header.php and includes/footer.php for site consistency.

Hero Section & Styling: A visually appealing hero section is included. You might need to add an img/contact-hero.jpg if you want a background image, or remove that part of the CSS.

After saving the file and ensuring your header.php and footer.php are correctly set up, you can visit http://localhost/dr_portfolio/contact.php in your browser to test the contact page.

Remember, if you plan to go live with this, setting up proper email sending (e.g., with PHPMailer) and possibly spam prevention (like reCAPTCHA) for the contact form would be important next steps!






Fatal error: Uncaught mysqli_sql_exception: Unknown column 'a.service_id' in 'on clause' in C:\xampppp\htdocs\dr_portfolio\admin\appointments.php:89 Stack trace: #0 C:\xampppp\htdocs\dr_portfolio\admin\appointments.php(89): mysqli->prepare('SELECT a.*, s.s...') #1 {main} thrown in C:\xampppp\htdocs\dr_portfolio\admin\appointments.php on line 89 fix above error in the code admin/appointments.php and provide full updated code as admin/appointments.php: <?php

// dr_portfolio/admin/appointments.php

session_start();



// Access control: Check if the user is logged in and is an admin/doctor

if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {

    header("Location: login.php");

    exit();

}



require_once '../config/database.php'; // Adjust path for include



$message = '';

$message_type = ''; // 'success' or 'danger'



// --- Handle Actions (Update Status, Delete) ---



// Handle Update Status

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_status'])) {

    $appointment_id = $_POST['appointment_id'] ?? null;

    $new_status = $_POST['new_status'] ?? '';



    if (!empty($appointment_id) && in_array($new_status, ['pending', 'confirmed', 'cancelled', 'completed'])) {

        $sql = "UPDATE appointments SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";

        $stmt = $conn->prepare($sql);

        $stmt->bind_param("si", $new_status, $appointment_id);

        if ($stmt->execute()) {

            $message = 'Appointment status updated successfully!';

            $message_type = 'success';

        } else {

            $message = 'Error updating status: ' . $stmt->error;

            $message_type = 'danger';

        }

        $stmt->close();

    } else {

        $message = 'Invalid request for status update.';

        $message_type = 'danger';

    }

}



// Handle Delete Appointment

if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {

    $appointment_id = $_GET['id'];

    $sql = "DELETE FROM appointments WHERE id = ?";

    $stmt = $conn->prepare($sql);

    $stmt->bind_param("i", $appointment_id);

    if ($stmt->execute()) {

        $message = 'Appointment deleted successfully!';

        $message_type = 'success';

        // Redirect to clear the GET parameters after deletion

        header("Location: appointments.php?message=" . urlencode($message) . "&type=" . $message_type);

        exit();

    } else {

        $message = 'Error deleting appointment: ' . $stmt->error;

        $message_type = 'danger';

    }

    $stmt->close();

}



// Fetch message from GET parameters if redirected after deletion/update

if (isset($_GET['message']) && isset($_GET['type'])) {

    $message = htmlspecialchars($_GET['message']);

    $message_type = htmlspecialchars($_GET['type']);

}



// --- Fetch Appointments for Display ---

$appointments = [];

$current_filter_status = $_GET['filter_status'] ?? 'all'; // Default filter



$sql = "SELECT a.*, s.service_name FROM appointments a LEFT JOIN services s ON a.service_id = s.id";

$where_clauses = [];

$bind_params = [];

$bind_types = '';



// Apply filter if not 'all'

if ($current_filter_status != 'all') {

    $where_clauses[] = "a.status = ?";

    $bind_params[] = $current_filter_status;

    $bind_types .= 's';

}



if (!empty($where_clauses)) {

    $sql .= " WHERE " . implode(" AND ", $where_clauses);

}



$sql .= " ORDER BY a.appointment_date DESC, a.appointment_time DESC";





$stmt = $conn->prepare($sql);



if (!empty($bind_params)) {

    $stmt->bind_param($bind_types, ...$bind_params);

}



$stmt->execute();

$result = $stmt->get_result();



if ($result && $result->num_rows > 0) {

    while ($row = $result->fetch_assoc()) {

        $appointments[] = $row;

    }

}

$stmt->close();

?>

<!DOCTYPE html>

<html lang="en">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Manage Appointments - Admin Dashboard</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <link rel="stylesheet" href="../css/style.css">

    <style>

        .admin-sidebar {

            background-color: #343a40;

            color: #f8f9fa;

            padding: 20px;

            height: 100vh;

        }

        .admin-sidebar .nav-link {

            color: #f8f9fa;

            padding: 10px 15px;

            border-radius: 5px;

        }

        .admin-sidebar .nav-link:hover {

            background-color: #007bff;

            color: #fff;

        }

        .admin-sidebar .nav-item.active .nav-link {

            background-color: #007bff;

            color: #fff;

        }

        /* Status Badges */

        .badge-pending { background-color: #ffc107; color: #343a40; } /* Yellow */

        .badge-confirmed { background-color: #28a745; color: #fff; } /* Green */

        .badge-cancelled { background-color: #dc3545; color: #fff; } /* Red */

        .badge-completed { background-color: #6c757d; color: #fff; } /* Gray */

    </style>

</head>

<body>

    <div class="d-flex" id="wrapper">

        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">

            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>

            <div class="list-group list-group-flush">

                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>

                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>

                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>

                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Appointments</a>

                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>

                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>

            </div>

        </div>

        <div id="page-content-wrapper" class="flex-grow-1">

            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">

                <div class="container-fluid">

                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>

                    <h5 class="my-2 ml-3">Manage Appointments</h5>

                </div>

            </nav>



            <div class="container-fluid py-4">

                <h1 class="mt-4">Manage Appointments</h1>



                <?php if (!empty($message)): ?>

                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">

                        <?php echo htmlspecialchars($message); ?>

                    </div>

                <?php endif; ?>



                <div class="mb-3">

                    <form action="appointments.php" method="GET" class="form-inline">

                        <label for="filter_status" class="mr-2">Filter by Status:</label>

                        <select name="filter_status" id="filter_status" class="form-control mr-2" onchange="this.form.submit()">

                            <option value="all" <?php echo ($current_filter_status == 'all') ? 'selected' : ''; ?>>All</option>

                            <option value="pending" <?php echo ($current_filter_status == 'pending') ? 'selected' : ''; ?>>Pending</option>

                            <option value="confirmed" <?php echo ($current_filter_status == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>

                            <option value="cancelled" <?php echo ($current_filter_status == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>

                            <option value="completed" <?php echo ($current_filter_status == 'completed') ? 'selected' : ''; ?>>Completed</option>

                        </select>

                        <noscript><button type="submit" class="btn btn-primary">Filter</button></noscript>

                    </form>

                </div>





                <h2 class="mt-4">All Appointments</h2>

                <?php if (!empty($appointments)): ?>

                    <div class="table-responsive">

                        <table class="table table-striped table-bordered">

                            <thead>

                                <tr>

                                    <th>ID</th>

                                    <th>Patient Name</th>

                                    <th>Email</th>

                                    <th>Phone</th>

                                    <th>Date</th>

                                    <th>Time</th>

                                    <th>Service</th>

                                    <th>Message</th>

                                    <th>Status</th>

                                    <th>Booked At</th>

                                    <th>Actions</th>

                                </tr>

                            </thead>

                            <tbody>

                                <?php foreach ($appointments as $appointment): ?>

                                    <tr>

                                        <td><?php echo htmlspecialchars($appointment['id']); ?></td>

                                        <td><?php echo htmlspecialchars($appointment['patient_name']); ?></td>

                                        <td><?php echo htmlspecialchars($appointment['patient_email']); ?></td>

                                        <td><?php echo htmlspecialchars($appointment['patient_phone'] ?? 'N/A'); ?></td>

                                        <td><?php echo htmlspecialchars($appointment['appointment_date']); ?></td>

                                        <td><?php echo htmlspecialchars(date('h:i A', strtotime($appointment['appointment_time']))); ?></td>

                                        <td><?php echo htmlspecialchars($appointment['service_name'] ?? 'Not specified'); ?></td>

                                        <td><?php echo nl2br(htmlspecialchars($appointment['message'] ?? '')); ?></td>

                                        <td><span class="badge badge-pill badge-<?php echo htmlspecialchars($appointment['status']); ?>"><?php echo ucfirst(htmlspecialchars($appointment['status'])); ?></span></td>

                                        <td><?php echo htmlspecialchars($appointment['created_at']); ?></td>

                                        <td>

                                            <form action="appointments.php" method="POST" class="d-inline-block mr-1">

                                                <input type="hidden" name="appointment_id" value="<?php echo htmlspecialchars($appointment['id']); ?>">

                                                <select name="new_status" class="form-control form-control-sm d-inline-block w-auto" onchange="this.form.submit()">

                                                    <option value="pending" <?php echo ($appointment['status'] == 'pending') ? 'selected' : ''; ?>>Pending</option>

                                                    <option value="confirmed" <?php echo ($appointment['status'] == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>

                                                    <option value="cancelled" <?php echo ($appointment['status'] == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>

                                                    <option value="completed" <?php echo ($appointment['status'] == 'completed') ? 'selected' : ''; ?>>Completed</option>

                                                </select>

                                                <input type="hidden" name="update_status" value="1">

                                            </form>

                                            <a href="appointments.php?action=delete&id=<?php echo htmlspecialchars($appointment['id']); ?>" class="btn btn-sm btn-danger mt-1" onclick="return confirm('Are you sure you want to delete this appointment?');">Delete</a>

                                        </td>

                                    </tr>

                                <?php endforeach; ?>

                            </tbody>

                        </table>

                    </div>

                <?php else: ?>

                    <p>No appointments found <?php echo ($current_filter_status != 'all') ? 'with status "' . htmlspecialchars($current_filter_status) . '"' : ''; ?>.</p>

                <?php endif; ?>



            </div>

        </div>

        </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>

        // Optional: Toggle sidebar for smaller screens

        $("#menu-toggle").click(function(e) {

            e.preventDefault();

            $("#wrapper").toggleClass("toggled");

        });

    </script>

</body>

</html>

<?php

// Close database connection

if (isset($conn)) {

    $conn->close();

}

?>



The error "Fatal error: Uncaught mysqli_sql_exception: Unknown column 'a.service_id' in 'on clause'" indicates that your appointments table does not have a service_id column as assumed in the previous code.

This means the LEFT JOIN services s ON a.service_id = s.id part of the SQL query is failing because a.service_id does not exist.

To fix this, we have two main options:

Recommended Fix (Add service_id to your appointments table): This is the best approach as it fully enables the functionality to link appointments to specific services, which is usually a core requirement for a doctor's portfolio.

You need to run an ALTER TABLE query in your database (e.g., via phpMyAdmin).

Quick Fix (Remove service_id from the query): If you absolutely do not want a service_id in your appointments table, we can remove the join and thus the display of the service name. However, this will limit the functionality of knowing which service an appointment is for.

I strongly recommend Option 1. Let's proceed with that, as it aligns with the complete feature set.

Step 1: Update Your appointments Table Schema
You need to add the service_id column to your appointments table.
Open your database management tool (like phpMyAdmin) for your dr_portfolio database and run the following SQL queries:

SQL

-- Add the service_id column if it doesn't exist
ALTER TABLE `appointments`
ADD COLUMN `service_id` INT DEFAULT NULL AFTER `patient_phone`;

-- (Optional but Recommended) Add a foreign key constraint for data integrity
-- This ensures that service_id refers to a valid service in the 'services' table
ALTER TABLE `appointments`
ADD CONSTRAINT `fk_appointment_service`
FOREIGN KEY (`service_id`) REFERENCES `services`(`id`) ON DELETE SET NULL ON UPDATE CASCADE;
Execute these two ALTER TABLE statements. The service_id column must exist before the PHP code can use it in a JOIN.

Step 2: Updated admin/appointments.php Code
Assuming you have now added the service_id column to your appointments table, the original PHP code for admin/appointments.php should work correctly. The error explicitly states Unknown column 'a.service_id', which means the column literally does not exist in your table, not that there's a syntax error in the PHP itself.

Here is the full updated code for admin/appointments.php, which is the same as what I provided before, but now it should work after you've performed the database schema update.

Please replace the entire content of your C:\xampp\htdocs\dr_portfolio\admin\appointments.php file with this code:

PHP

<?php
// dr_portfolio/admin/appointments.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Actions (Update Status, Delete) ---

// Handle Update Status
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_status'])) {
    $appointment_id = $_POST['appointment_id'] ?? null;
    $new_status = $_POST['new_status'] ?? '';

    if (!empty($appointment_id) && in_array($new_status, ['pending', 'confirmed', 'cancelled', 'completed'])) {
        $sql = "UPDATE appointments SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("si", $new_status, $appointment_id);
        if ($stmt->execute()) {
            $message = 'Appointment status updated successfully!';
            $message_type = 'success';
        } else {
            $message = 'Error updating status: ' . $stmt->error;
            $message_type = 'danger';
        }
        $stmt->close();
    } else {
        $message = 'Invalid request for status update.';
        $message_type = 'danger';
    }
}

// Handle Delete Appointment
if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id'])) {
    $appointment_id = $_GET['id'];
    $sql = "DELETE FROM appointments WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $appointment_id);
    if ($stmt->execute()) {
        $message = 'Appointment deleted successfully!';
        $message_type = 'success';
        // Redirect to clear the GET parameters after deletion
        header("Location: appointments.php?message=" . urlencode($message) . "&type=" . $message_type);
        exit();
    } else {
        $message = 'Error deleting appointment: ' . $stmt->error;
        $message_type = 'danger';
    }
    $stmt->close();
}

// Fetch message from GET parameters if redirected after deletion/update
if (isset($_GET['message']) && isset($_GET['type'])) {
    $message = htmlspecialchars($_GET['message']);
    $message_type = htmlspecialchars($_GET['type']);
}

// --- Fetch Appointments for Display ---
$appointments = [];
$current_filter_status = $_GET['filter_status'] ?? 'all'; // Default filter

// This is the line that caused the error: `a.service_id` must exist in your table.
// Assuming you've added the service_id column to your appointments table.
$sql = "SELECT a.*, s.service_name FROM appointments a LEFT JOIN services s ON a.service_id = s.id";
$where_clauses = [];
$bind_params = [];
$bind_types = '';

// Apply filter if not 'all'
if ($current_filter_status != 'all') {
    $where_clauses[] = "a.status = ?";
    $bind_params[] = $current_filter_status;
    $bind_types .= 's';
}

if (!empty($where_clauses)) {
    $sql .= " WHERE " . implode(" AND ", $where_clauses);
}

$sql .= " ORDER BY a.appointment_date DESC, a.appointment_time DESC";


$stmt = $conn->prepare($sql);

if (!empty($bind_params)) {
    $stmt->bind_param($bind_types, ...$bind_params);
}

$stmt->execute();
$result = $stmt->get_result();

if ($result && $result->num_rows > 0) {
    while ($row = $result->fetch_assoc()) {
        $appointments[] = $row;
    }
}
$stmt->close();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Appointments - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
        /* Status Badges */
        .badge-pending { background-color: #ffc107; color: #343a40; } /* Yellow */
        .badge-confirmed { background-color: #28a745; color: #fff; } /* Green */
        .badge-cancelled { background-color: #dc3545; color: #fff; } /* Red */
        .badge-completed { background-color: #6c757d; color: #fff; } /* Gray */
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username']); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white active">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Manage Appointments</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Manage Appointments</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="mb-3">
                    <form action="appointments.php" method="GET" class="form-inline">
                        <label for="filter_status" class="mr-2">Filter by Status:</label>
                        <select name="filter_status" id="filter_status" class="form-control mr-2" onchange="this.form.submit()">
                            <option value="all" <?php echo ($current_filter_status == 'all') ? 'selected' : ''; ?>>All</option>
                            <option value="pending" <?php echo ($current_filter_status == 'pending') ? 'selected' : ''; ?>>Pending</option>
                            <option value="confirmed" <?php echo ($current_filter_status == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>
                            <option value="cancelled" <?php echo ($current_filter_status == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>
                            <option value="completed" <?php echo ($current_filter_status == 'completed') ? 'selected' : ''; ?>>Completed</option>
                        </select>
                        <noscript><button type="submit" class="btn btn-primary">Filter</button></noscript>
                    </form>
                </div>


                <h2 class="mt-4">All Appointments</h2>
                <?php if (!empty($appointments)): ?>
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Patient Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Service</th>
                                    <th>Message</th>
                                    <th>Status</th>
                                    <th>Booked At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($appointments as $appointment): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($appointment['id']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_name']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_email']); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['patient_phone'] ?? 'N/A'); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['appointment_date']); ?></td>
                                        <td><?php echo htmlspecialchars(date('h:i A', strtotime($appointment['appointment_time']))); ?></td>
                                        <td><?php echo htmlspecialchars($appointment['service_name'] ?? 'Not specified'); ?></td>
                                        <td><?php echo nl2br(htmlspecialchars($appointment['message'] ?? '')); ?></td>
                                        <td><span class="badge badge-pill badge-<?php echo htmlspecialchars($appointment['status']); ?>"><?php echo ucfirst(htmlspecialchars($appointment['status'])); ?></span></td>
                                        <td><?php echo htmlspecialchars($appointment['created_at']); ?></td>
                                        <td>
                                            <form action="appointments.php" method="POST" class="d-inline-block mr-1">
                                                <input type="hidden" name="appointment_id" value="<?php echo htmlspecialchars($appointment['id']); ?>">
                                                <select name="new_status" class="form-control form-control-sm d-inline-block w-auto" onchange="this.form.submit()">
                                                    <option value="pending" <?php echo ($appointment['status'] == 'pending') ? 'selected' : ''; ?>>Pending</option>
                                                    <option value="confirmed" <?php echo ($appointment['status'] == 'confirmed') ? 'selected' : ''; ?>>Confirmed</option>
                                                    <option value="cancelled" <?php echo ($appointment['status'] == 'cancelled') ? 'selected' : ''; ?>>Cancelled</option>
                                                    <option value="completed" <?php echo ($appointment['status'] == 'completed') ? 'selected' : ''; ?>>Completed</option>
                                                </select>
                                                <input type="hidden" name="update_status" value="1">
                                            </form>
                                            <a href="appointments.php?action=delete&id=<?php echo htmlspecialchars($appointment['id']); ?>" class="btn btn-sm btn-danger mt-1" onclick="return confirm('Are you sure you want to delete this appointment?');">Delete</a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                <?php else: ?>
                    <p>No appointments found <?php echo ($current_filter_status != 'all') ? 'with status "' . htmlspecialchars($current_filter_status) . '"' : ''; ?>.</p>
                <?php endif; ?>

            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        // Optional: Toggle sidebar for smaller screens
        $("#menu-toggle").click(function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    </script>
</body>
</html>
<?php
// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>





when i am click on book an appointment button on index page, it shows white dashboard only. why?



Show thinking
The "white dashboard only" issue when clicking "Book an Appointment" from your index.php page strongly suggests that the link for that button is pointing to the wrong place, most likely to your admin/index.php (the admin dashboard) or an empty file.

Let's diagnose and fix this.

Why it's happening:
Your admin/index.php page, when accessed without a valid admin session, often redirects to admin/login.php or simply shows a blank page if login.php doesn't exist or has issues, or if PHP error reporting is off. The "white dashboard" symptom is very typical of an attempt to access a protected or non-existent page without proper handling.

The "Book an Appointment" button on your main index.php page should point to the public-facing dr_portfolio/appointments.php file, not any admin file.

Diagnosis Steps (What you should check):
Inspect the Button Link on index.php:

Go to http://localhost/dr_portfolio/index.php in your browser.

Right-click on the "Book an Appointment" button.

Select "Inspect" (or "Inspect Element" / "View Page Source" depending on your browser).

Find the <a> (anchor) tag for that button and look at its href attribute.

What is the exact value of href? It should ideally be appointments.php. If it's something like admin/index.php, admin/, or a completely different path, that's your problem.

Check your dr_portfolio/index.php file:

Open C:\xampp\htdocs\dr_portfolio\index.php.

Look for the HTML code that creates your "Book an Appointment" button. It will likely look something like this:

HTML

<a href="..." class="btn btn-primary btn-lg">Book an Appointment</a>
Examine what's inside the href="...".

Verify dr_portfolio/appointments.php exists and has the correct code:

Ensure the file C:\xampp\htdocs\dr_portfolio\appointments.php exists.

Confirm it contains the public-facing appointment form code that I previously provided (which starts with <?php require_once 'config/database.php'; and does not have session_start(); or admin checks at the very top).

The Most Likely Fix: Correcting the href in index.php
You need to ensure the "Book an Appointment" button on your index.php page links to the correct public appointments page.

Here's the code you should check and update in your dr_portfolio/index.php file:

Locate the section in your index.php that contains this button. It's often within a hero section or a call-to-action area.

Find this (or similar) code in your index.php:

HTML

<section class="hero-section text-center py-5">
    <div class="container">
        <h1>Welcome to Dr. [Doctor's Name]'s Clinic</h1>
        <p class="lead">Your health, our priority. Providing compassionate and expert care.</p>
        <a href="appointments.php" class="btn btn-primary btn-lg">Book an Appointment</a>
    </div>
</section>

Make sure the href attribute for that button is exactly appointments.php. Since index.php and appointments.php are both in the dr_portfolio root directory, a simple relative path like appointments.php is correct.

After making the change:
Save your index.php file.

Clear your browser's cache (Ctrl+F5 or Cmd+Shift+R often works for a hard refresh).

Go to http://localhost/dr_portfolio/index.php and try clicking the "Book an Appointment" button again.

This should now correctly load the appointment booking form.






provide code for js/script.js


Let's create a js/script.js file. This file will house JavaScript for your dr_portfolio website to enhance interactivity and user experience.

While your current site structure relies heavily on Bootstrap for responsiveness and some interactive elements (like the sidebar toggle in the admin), custom JavaScript can add things like:

Smooth scrolling for navigation links.

Interactive elements (e.g., image carousels not covered by Bootstrap, form validations beyond basic HTML5).

Dynamic content loading.

Client-side form validation (beyond basic HTML5 required attributes).

For now, I'll provide a basic script.js that includes a common feature: toggling the sidebar in the admin panel, which was previously handled with inline jQuery. Moving it here keeps your HTML cleaner. I'll also add a placeholder for smooth scrolling on the public site, as that's a common enhancement.

Code for dr_portfolio/js/script.js
File Path: C:\xampp\htdocs\dr_portfolio\js\script.js

JavaScript

// dr_portfolio/js/script.js

// --- Admin Sidebar Toggle (for admin/appointments.php, admin/index.php etc.) ---
// This assumes jQuery is loaded (as it is in your Bootstrap setup)
$(document).ready(function() {
    // Check if the element #menu-toggle exists, meaning we are on an admin page
    if ($("#menu-toggle").length) {
        $("#menu-toggle").on("click", function(e) {
            e.preventDefault();
            $("#wrapper").toggleClass("toggled");
        });
    }
});


// --- Public Site Smooth Scrolling for Anchor Links ---
// This makes navigation to sections on the same page smoother.
$(document).ready(function() {
    // Select all links with hashes and not part of Bootstrap's data-toggle (like dropdowns)
    $('a[href*="#"]:not([data-toggle="collapse"])').on('click', function(event) {
        if (
            location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') &&
            location.hostname == this.hostname
        ) {
            var target = $(this.hash);
            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            if (target.length) {
                event.preventDefault(); // Prevent default anchor click behavior
                $('html, body').animate({
                    scrollTop: target.offset().top - 70 // Adjust 70px for fixed header/navbar height if applicable
                }, 1000, function() {
                    // Callback after animation
                    // Add hash (#) to URL when done scrolling (optional)
                    // window.location.hash = target.selector;
                });
            }
        }
    });
});


// --- General Client-Side Form Validation (Example for a basic contact form) ---
// This is a more advanced example. You would apply it to specific forms.
// For now, HTML5 validation (e.g., 'required', type='email') handles most basics.
// If you implement this, ensure you have IDs for your form and input fields.

/*
$(document).ready(function() {
    $('#contactForm').submit(function(e) {
        let isValid = true;
        const name = $('#name').val();
        const email = $('#email').val();
        const subject = $('#subject').val();
        const message = $('#message').val();

        // Clear previous errors
        $('.error-message').remove();
        $('.form-control').removeClass('is-invalid');

        if (name.trim() === '') {
            $('#name').addClass('is-invalid').after('<div class="invalid-feedback error-message">Name is required.</div>');
            isValid = false;
        }
        if (email.trim() === '') {
            $('#email').addClass('is-invalid').after('<div class="invalid-feedback error-message">Email is required.</div>');
            isValid = false;
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            $('#email').addClass('is-invalid').after('<div class="invalid-feedback error-message">Please enter a valid email.</div>');
            isValid = false;
        }
        if (subject.trim() === '') {
            $('#subject').addClass('is-invalid').after('<div class="invalid-feedback error-message">Subject is required.</div>');
            isValid = false;
        }
        if (message.trim() === '') {
            $('#message').addClass('is-invalid').after('<div class="invalid-feedback error-message">Message is required.</div>');
            isValid = false;
        }

        if (!isValid) {
            e.preventDefault(); // Stop form submission if validation fails
        }
    });
});
*/
How to Link script.js to Your HTML Files:
To make this JavaScript code run, you need to include js/script.js in your HTML files, typically just before the closing </body> tag.

1. For Public Pages (index.php, services.php, appointments.php, contact.php):

You should already have lines for jQuery and Bootstrap JS. Add your script.js after Bootstrap's JS. If you have an includes/footer.php, this is the ideal place to put it.

Example of your includes/footer.php:

HTML

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="js/script.js"></script>

</body>
</html>
Make sure includes/footer.php is included in all your main public pages.

2. For Admin Pages (admin/index.php, admin/appointments.php, admin/services.php, admin/testimonials.php etc.):

Each admin page directly includes the jQuery and Bootstrap JS. You'll need to add the script.js inclusion here as well, adjusting the path.

Example of the bottom of your admin pages (e.g., admin/appointments.php):

HTML

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="../js/script.js"></script>

</body>
</html>
Key Features Explained:
Admin Sidebar Toggle:

This part of the code replaces the inline JavaScript you had on the admin pages.

It waits for the document to be ready ($(document).ready(...)).

It checks if an element with the ID #menu-toggle exists (this element is your "Toggle Menu" button in the admin). This makes the code safe to run on both admin and public pages, as the admin-specific code only executes if its target elements are present.

When the #menu-toggle button is clicked, it prevents the default link behavior (e.preventDefault()).

It then toggles the toggled class on the #wrapper element, which Bootstrap uses to show/hide the sidebar.

Public Site Smooth Scrolling:

This script makes clicks on internal page links (e.g., #about, #contact if you add them to your nav and content) scroll smoothly instead of jumping directly.

It looks for <a> tags with href attributes containing # (hashtags) that are not Bootstrap data toggles (to avoid conflicts with dropdowns, etc.).

When such a link is clicked, it animates the scroll to the target element's position.

target.offset().top - 70 is a common adjustment to account for a fixed navigation bar, preventing the content from being hidden behind it. Adjust 70 if your navbar has a different height.

Next Steps:
Create the js folder: If you don't have it already, create a folder named js inside C:\xampp\htdocs\dr_portfolio\.

Save the file: Save the provided code as script.js inside that js folder.

Update HTML files: Go through your admin/index.php, admin/appointments.php, admin/services.php, admin/testimonials.php, and your includes/footer.php (if you're using it for public pages) and ensure the <script src="..."> line for script.js is correctly added with the right path (../js/script.js for admin pages, js/script.js for public pages).

Test: Reload your admin pages and public pages and test the sidebar toggle and any internal links you might have for smooth scrolling.






provide code for change password


Changing a user's password, especially in an admin panel, is a critical security feature. This process typically involves:

Authentication: Ensuring the user is logged in and authorized to change passwords.

Current Password Verification (Optional but Recommended): For a logged-in user, asking for their current password before allowing a change adds an extra layer of security. This prevents someone who gains access to an unattended, logged-in session from changing the password.

New Password Input: Getting the new password and a confirmation (re-type) of it.

Validation: Checking if new passwords meet complexity requirements (e.g., minimum length, special characters) and if the new password matches the confirmation.

Hashing: Securely hashing the new password before storing it in the database. Never store plain text passwords.

Update: Updating the hashed password in the database.

Feedback: Providing clear success or error messages to the user.

Let's create the dr_portfolio/admin/change_password.php file.

Code for dr_portfolio/admin/change_password.php
This code will provide a form for a logged-in admin/doctor to change their password.

File Path: C:\xampp\htdocs\dr_portfolio\admin\change_password.php

PHP

<?php
// dr_portfolio/admin/change_password.php
session_start();

// Access control: Check if the user is logged in and is an admin/doctor
if (!isset($_SESSION['user_id']) || ($_SESSION['role'] != 'admin' && $_SESSION['role'] != 'doctor')) {
    header("Location: login.php");
    exit();
}

require_once '../config/database.php'; // Adjust path for include

$message = '';
$message_type = ''; // 'success' or 'danger'

// --- Handle Password Change Form Submission ---
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['change_password'])) {
    $user_id = $_SESSION['user_id']; // Get the ID of the logged-in user

    $current_password = $_POST['current_password'] ?? '';
    $new_password = $_POST['new_password'] ?? '';
    $confirm_new_password = $_POST['confirm_new_password'] ?? '';

    // 1. Fetch current user's hashed password from DB
    $sql_fetch_pass = "SELECT password FROM users WHERE id = ?";
    $stmt_fetch_pass = $conn->prepare($sql_fetch_pass);
    $stmt_fetch_pass->bind_param("i", $user_id);
    $stmt_fetch_pass->execute();
    $result_fetch_pass = $stmt_fetch_pass->get_result();
    $user = $result_fetch_pass->fetch_assoc();
    $stmt_fetch_pass->close();

    if (!$user) {
        $message = 'User not found.';
        $message_type = 'danger';
    } elseif (!password_verify($current_password, $user['password'])) {
        // 2. Verify current password
        $message = 'Incorrect current password.';
        $message_type = 'danger';
    } elseif (empty($new_password) || empty($confirm_new_password)) {
        // 3. Basic validation for new passwords
        $message = 'New password and confirmation are required.';
        $message_type = 'danger';
    } elseif ($new_password !== $confirm_new_password) {
        // 4. Check if new password and confirmation match
        $message = 'New password and confirm new password do not match.';
        $message_type = 'danger';
    } elseif (strlen($new_password) < 8) {
        // 5. Password strength: minimum length
        $message = 'New password must be at least 8 characters long.';
        $message_type = 'danger';
    }
    // Optional: Add more password complexity checks (e.g., require numbers, symbols)
    /*
    elseif (!preg_match('/[A-Z]/', $new_password) || !preg_match('/[a-z]/', $new_password) ||
            !preg_match('/[0-9]/', $new_password) || !preg_match('/[^A-Za-z0-9]/', $new_password)) {
        $message = 'New password must include uppercase, lowercase, numbers, and special characters.';
        $message_type = 'danger';
    }
    */
    else {
        // All checks passed, hash and update password
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        $sql_update_pass = "UPDATE users SET password = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
        $stmt_update_pass = $conn->prepare($sql_update_pass);
        $stmt_update_pass->bind_param("si", $hashed_password, $user_id);

        if ($stmt_update_pass->execute()) {
            $message = 'Password changed successfully!';
            $message_type = 'success';
            // Clear form fields on success
            $_POST = array();
        } else {
            $message = 'Error updating password: ' . $stmt_update_pass->error;
            $message_type = 'danger';
        }
        $stmt_update_pass->close();
    }
}

// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password - Admin Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css"> <style>
        /* Re-using admin sidebar styles for consistency */
        .admin-sidebar {
            background-color: #343a40;
            color: #f8f9fa;
            padding: 20px;
            height: 100vh;
        }
        .admin-sidebar .nav-link {
            color: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
        }
        .admin-sidebar .nav-link:hover {
            background-color: #007bff;
            color: #fff;
        }
        .admin-sidebar .nav-item.active .nav-link {
            background-color: #007bff;
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div class="bg-dark border-right admin-sidebar" id="sidebar-wrapper">
            <div class="sidebar-heading text-white py-4">Dr. <?php echo htmlspecialchars($_SESSION['username'] ?? 'Admin'); ?>'s Admin</div>
            <div class="list-group list-group-flush">
                <a href="index.php" class="list-group-item list-group-item-action bg-dark text-white">Dashboard</a>
                <a href="profile.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Profile</a>
                <a href="services.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Services</a>
                <a href="appointments.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Appointments</a>
                <a href="testimonials.php" class="list-group-item list-group-item-action bg-dark text-white">Manage Testimonials</a>
                <a href="change_password.php" class="list-group-item list-group-item-action bg-dark text-white active">Change Password</a>
                <a href="logout.php" class="list-group-item list-group-item-action bg-dark text-white">Logout</a>
            </div>
        </div>
        <div id="page-content-wrapper" class="flex-grow-1">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
                <div class="container-fluid">
                    <button class="btn btn-primary" id="menu-toggle">Toggle Menu</button>
                    <h5 class="my-2 ml-3">Change Password</h5>
                </div>
            </nav>

            <div class="container-fluid py-4">
                <h1 class="mt-4">Change Password</h1>

                <?php if (!empty($message)): ?>
                    <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                        <?php echo htmlspecialchars($message); ?>
                    </div>
                <?php endif; ?>

                <div class="card mt-4">
                    <div class="card-header">
                        Update Your Password
                    </div>
                    <div class="card-body">
                        <form action="change_password.php" method="POST">
                            <div class="form-group">
                                <label for="current_password">Current Password <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="current_password" name="current_password" required>
                            </div>
                            <div class="form-group">
                                <label for="new_password">New Password <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="new_password" name="new_password" required minlength="8">
                                <small class="form-text text-muted">Password must be at least 8 characters long.</small>
                            </div>
                            <div class="form-group">
                                <label for="confirm_new_password">Confirm New Password <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="confirm_new_password" name="confirm_new_password" required minlength="8">
                            </div>
                            <button type="submit" name="change_password" class="btn btn-primary">Change Password</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="../js/script.js"></script>
</body>
</html>
Explanation and Setup Steps:
File Location: Save this code as C:\xampp\htdocs\dr_portfolio\admin\change_password.php.

Access Control:

session_start(); is at the top to resume the user's session.

The code checks $_SESSION['user_id'] and $_SESSION['role'] to ensure only logged-in admin or doctor users can access this page. Unauthorized users are redirected to login.php.

Database Connection:

require_once '../config/database.php'; connects to your database. The ../ is crucial as this file is in a subdirectory (admin/).

Form Submission Handling (POST request):

When the form is submitted, it retrieves the current_password, new_password, and confirm_new_password from the $_POST array.

$_SESSION['user_id'] is used to identify which user's password needs to be changed.

Security and Validation:

Fetch Current Password: It first queries the users table to get the currently logged-in user's stored hashed password.

password_verify(): This built-in PHP function is used to securely check if the current_password provided by the user matches the hashed password retrieved from the database. This is critical!

New Password Match: It checks if new_password and confirm_new_password are identical.

Password Length: A basic check for a minimum length of 8 characters for the new password. You can uncomment the more complex preg_match section if you want to enforce stronger password policies (e.g., requiring uppercase, lowercase, numbers, special characters).

password_hash(): If all validations pass, the new_password is securely hashed using password_hash(PASSWORD_DEFAULT) before being stored. This is the correct and recommended way to store passwords.

Database Update: The hashed new password is then updated in the users table for the corresponding user_id.

User Feedback: message and message_type variables are used to display success or error alerts to the user.

Form HTML:

A simple Bootstrap form with fields for current password, new password, and confirm new password.

type="password" is used for all password fields to obscure input.

minlength="8" provides basic client-side validation for minimum length.

Sidebar Navigation:

A new link for "Change Password" has been added to the admin sidebar navigation, with active class set for this page.

JavaScript Inclusion:

../js/script.js is included at the bottom, handling the sidebar toggle.

Important Notes:
Hashing Algorithm: PASSWORD_DEFAULT for password_hash() currently uses Bcrypt and is generally considered secure. PHP automatically handles the salt.

Error Handling: While basic messages are provided, a production system might log more detailed errors or provide more specific user guidance.

Password Reset (Forgot Password): This page is for changing a password when the current one is known. A "Forgot Password" feature (which involves sending a reset link via email) is a completely separate and more complex implementation.

Styling: The basic admin panel styling is re-used.

After saving this file, navigate to http://localhost/dr_portfolio/admin/change_password.php (after logging in) to test the functionality.






provide code for forgot password by verifying email if password is forgotten



Show thinking
Okay, implementing a "forgot password" feature is a multi-step process that requires several new files and a small change to your database. This is a critical security feature, so we'll use robust methods.

Workflow:

User Request: User goes to forgot_password.php and enters their email.

Token Generation: If the email exists, a unique, time-limited token is generated and stored in the database.

Email Sending: An email with a unique password reset link (containing the token) is sent to the user.

Token Verification: User clicks the link, arriving at reset_password.php. The token is validated (existence, expiration, user match).

New Password Set: If the token is valid, the user can set a new password.

Password Update & Token Invalidation: The new password is hashed and stored, and the token is immediately invalidated (removed/expired).

Part 1: Database Modification (Add Token Columns)
You need to add two new columns to your users table to store the reset token and its expiration time.

Open your database management tool (like phpMyAdmin) for your dr_portfolio database and run the following SQL queries:

SQL

-- Add a column for the reset token
ALTER TABLE `users`
ADD COLUMN `reset_token` VARCHAR(255) DEFAULT NULL AFTER `password`;

-- Add a column for the token's expiration timestamp
ALTER TABLE `users`
ADD COLUMN `reset_token_expires_at` DATETIME DEFAULT NULL AFTER `reset_token`;
Part 2: Set up PHPMailer (for reliable email sending)
PHP's built-in mail() function is often unreliable and can be blocked by spam filters. PHPMailer is the recommended way to send emails.

Download PHPMailer:

Go to the PHPMailer GitHub repository: https://github.com/PHPMailer/PHPMailer/releases

Download the latest stable release (e.g., PHPMailer-X.X.X.zip).

Extract the contents of the PHPMailer-X.X.X.zip file.

Place PHPMailer files:

Inside your dr_portfolio project root (C:\xampp\htdocs\dr_portfolio), create a new folder named vendor.

Copy the src folder from the extracted PHPMailer archive into your vendor folder.

So you should have C:\xampp\htdocs\dr_portfolio\vendor\src\PHPMailer.php, C:\xampp\htdocs\dr_portfolio\vendor\src\SMTP.php, etc.

Part 3: admin/forgot_password.php (Request Reset Link)
This file will contain the form where the user enters their email and the PHP logic to send the reset email.

File Path: C:\xampp\htdocs\dr_portfolio\admin\forgot_password.php

PHP

<?php
// dr_portfolio/admin/forgot_password.php
session_start(); // Start session to display messages

require_once '../config/database.php'; // Adjust path for database connection
require_once '../vendor/src/PHPMailer.php'; // PHPMailer core
require_once '../vendor/src/SMTP.php';     // PHPMailer for SMTP
require_once '../vendor/src/Exception.php'; // PHPMailer exceptions

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;

$message = '';
$message_type = ''; // 'success' or 'danger'

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['forgot_password'])) {
    $email = filter_var($_POST['email'] ?? '', FILTER_SANITIZE_EMAIL);

    if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $message = 'Please enter a valid email address.';
        $message_type = 'danger';
    } else {
        // Check if the email exists in the database
        $sql = "SELECT id, username FROM users WHERE email = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("s", $email);
        $stmt->execute();
        $result = $stmt->get_result();
        $user = $result->fetch_assoc();
        $stmt->close();

        if ($user) {
            // Email exists, generate a unique token
            $token = bin2hex(random_bytes(32)); // 64 character hex string
            $expires = date("Y-m-d H:i:s", strtotime('+1 hour')); // Token valid for 1 hour

            // Store token and expiry in the database
            $sql_update_token = "UPDATE users SET reset_token = ?, reset_token_expires_at = ? WHERE id = ?";
            $stmt_update_token = $conn->prepare($sql_update_token);
            $stmt_update_token->bind_param("ssi", $token, $expires, $user['id']);

            if ($stmt_update_token->execute()) {
                // Send email
                $mail = new PHPMailer(true);
                try {
                    // Server settings (YOU NEED TO CONFIGURE THESE)
                    $mail->isSMTP();
                    $mail->Host       = 'smtp.gmail.com'; // Your SMTP server (e.g., 'smtp.gmail.com' for Gmail)
                    $mail->SMTPAuth   = true;
                    $mail->Username   = 'your_email@example.com'; // Your SMTP username (e.g., your Gmail address)
                    $mail->Password   = 'your_email_password';   // Your SMTP password or App Password
                    $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS; // Use ENCRYPTION_SMTPS for port 465, ENCRYPTION_STARTTLS for port 587
                    $mail->Port       = 587; // TCP port to connect to

                    // Recipients
                    $mail->setFrom('no-reply@yourdomain.com', 'Dr. Portfolio Support'); // Sender email and name
                    $mail->addAddress($email, $user['username']); // Recipient email and name

                    // Content
                    $mail->isHTML(true);
                    $mail->Subject = 'Password Reset Request for Dr. Portfolio Account';
                    // The reset link URL. Adjust 'http://localhost/dr_portfolio/admin/' if your setup is different
                    $reset_link = "http://localhost/dr_portfolio/admin/reset_password.php?token=" . $token . "&email=" . urlencode($email);

                    $mail->Body    = "Dear " . htmlspecialchars($user['username']) . ",<br><br>"
                                   . "You have requested to reset your password for your Dr. Portfolio account.<br>"
                                   . "Please click on the following link to reset your password:<br><br>"
                                   . "<a href='" . htmlspecialchars($reset_link) . "'>Reset My Password</a><br><br>"
                                   . "This link will expire in 1 hour.<br>"
                                   . "If you did not request a password reset, please ignore this email.<br><br>"
                                   . "Thank you,<br>Dr. Portfolio Team";
                    $mail->AltBody = "Dear " . htmlspecialchars($user['username']) . ",\n\n"
                                   . "You have requested to reset your password for your Dr. Portfolio account.\n"
                                   . "Please copy and paste the following link into your browser to reset your password:\n\n"
                                   . $reset_link . "\n\n"
                                   . "This link will expire in 1 hour.\n"
                                   . "If you did not request a password reset, please ignore this email.\n\n"
                                   . "Thank you,\nDr. Portfolio Team";

                    $mail->send();
                    $message = 'If an account with that email exists, a password reset link has been sent to your email address.';
                    $message_type = 'success';
                    // For security, always show a generic message whether the email exists or not.
                    // This prevents attackers from enumerating valid email addresses.
                } catch (Exception $e) {
                    $message = "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
                    $message_type = 'danger';
                }
            } else {
                $message = 'Error saving reset token: ' . $stmt_update_token->error;
                $message_type = 'danger';
            }
            $stmt_update_token->close();
        } else {
            // Email does NOT exist, but show generic success message for security
            $message = 'If an account with that email exists, a password reset link has been sent to your email address.';
            $message_type = 'success';
        }
    }
}

// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password - Dr. Portfolio Admin</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css"> <style>
        body {
            background-color: #f8f9fa;
        }
        .forgot-password-container {
            max-width: 500px;
            margin: 100px auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            background-color: #fff;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="forgot-password-container">
            <h2 class="text-center mb-4">Forgot Your Password?</h2>
            <p class="text-center text-muted">Enter your email address and we'll send you a link to reset your password.</p>

            <?php if (!empty($message)): ?>
                <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                    <?php echo htmlspecialchars($message); ?>
                </div>
            <?php endif; ?>

            <form action="forgot_password.php" method="POST">
                <div class="form-group">
                    <label for="email">Email address</label>
                    <input type="email" class="form-control" id="email" name="email" value="<?php echo htmlspecialchars($_POST['email'] ?? ''); ?>" required>
                </div>
                <button type="submit" name="forgot_password" class="btn btn-primary btn-block">Send Reset Link</button>
            </form>
            <p class="text-center mt-3"><a href="login.php">Back to Login</a></p>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
Part 4: admin/reset_password.php (Set New Password)
This file will handle the actual password reset. It verifies the token and allows the user to set a new password.

File Path: C:\xampp\htdocs\dr_portfolio\admin\reset_password.php

PHP

<?php
// dr_portfolio/admin/reset_password.php
session_start(); // Start session to display messages

require_once '../config/database.php'; // Adjust path for database connection

$message = '';
$message_type = ''; // 'success' or 'danger'
$valid_token = false;
$email = $_GET['email'] ?? '';
$token = $_GET['token'] ?? '';

// --- Verify Token on Page Load ---
if (!empty($email) && !empty($token)) {
    $sql = "SELECT id FROM users WHERE email = ? AND reset_token = ? AND reset_token_expires_at > CURRENT_TIMESTAMP";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ss", $email, $token);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows === 1) {
        $valid_token = true;
        $user = $result->fetch_assoc(); // Get user ID
    } else {
        $message = 'Invalid or expired password reset link.';
        $message_type = 'danger';
    }
    $stmt->close();
} else {
    $message = 'Invalid password reset request.';
    $message_type = 'danger';
}

// --- Handle New Password Submission ---
if ($valid_token && $_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['reset_password'])) {
    $new_password = $_POST['new_password'] ?? '';
    $confirm_new_password = $_POST['confirm_new_password'] ?? '';
    $user_id = $user['id']; // User ID fetched from token verification

    if (empty($new_password) || empty($confirm_new_password)) {
        $message = 'New password and confirmation are required.';
        $message_type = 'danger';
    } elseif ($new_password !== $confirm_new_password) {
        $message = 'New password and confirm new password do not match.';
        $message_type = 'danger';
    } elseif (strlen($new_password) < 8) {
        $message = 'New password must be at least 8 characters long.';
        $message_type = 'danger';
    }
    // Optional: Add more password complexity checks
    /*
    elseif (!preg_match('/[A-Z]/', $new_password) || !preg_match('/[a-z]/', $new_password) ||
            !preg_match('/[0-9]/', $new_password) || !preg_match('/[^A-Za-z0-9]/', $new_password)) {
        $message = 'New password must include uppercase, lowercase, numbers, and special characters.';
        $message_type = 'danger';
    }
    */
    else {
        // Hash the new password
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        // Update password and invalidate token
        $sql_update_pass = "UPDATE users SET password = ?, reset_token = NULL, reset_token_expires_at = NULL, updated_at = CURRENT_TIMESTAMP WHERE id = ?";
        $stmt_update_pass = $conn->prepare($sql_update_pass);
        $stmt_update_pass->bind_param("si", $hashed_password, $user_id);

        if ($stmt_update_pass->execute()) {
            $_SESSION['reset_success_message'] = 'Your password has been successfully reset. You can now log in with your new password.';
            header("Location: login.php"); // Redirect to login page
            exit();
        } else {
            $message = 'Error updating password: ' . $stmt_update_pass->error;
            $message_type = 'danger';
        }
        $stmt_update_pass->close();
    }
}

// Close database connection
if (isset($conn)) {
    $conn->close();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - Dr. Portfolio Admin</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/style.css"> <style>
        body {
            background-color: #f8f9fa;
        }
        .reset-password-container {
            max-width: 500px;
            margin: 100px auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            background-color: #fff;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="reset-password-container">
            <h2 class="text-center mb-4">Reset Your Password</h2>

            <?php if (!empty($message)): ?>
                <div class="alert alert-<?php echo $message_type; ?>" role="alert">
                    <?php echo htmlspecialchars($message); ?>
                </div>
            <?php endif; ?>

            <?php if ($valid_token): ?>
                <form action="reset_password.php?token=<?php echo htmlspecialchars($token); ?>&email=<?php echo urlencode($email); ?>" method="POST">
                    <div class="form-group">
                        <label for="new_password">New Password <span class="text-danger">*</span></label>
                        <input type="password" class="form-control" id="new_password" name="new_password" required minlength="8">
                        <small class="form-text text-muted">Password must be at least 8 characters long.</small>
                    </div>
                    <div class="form-group">
                        <label for="confirm_new_password">Confirm New Password <span class="text-danger">*</span></label>
                        <input type="password" class="form-control" id="confirm_new_password" name="confirm_new_password" required minlength="8">
                    </div>
                    <button type="submit" name="reset_password" class="btn btn-primary btn-block">Reset Password</button>
                </form>
            <?php else: ?>
                <p class="text-center">Please request a new password reset link if the current one is invalid or expired.</p>
                <p class="text-center mt-3"><a href="forgot_password.php">Request New Reset Link</a></p>
            <?php endif; ?>

            <p class="text-center mt-3"><a href="login.php">Back to Login</a></p>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
Part 5: Update admin/login.php (Add Forgot Password Link)
Finally, you need to add a "Forgot Password?" link on your login page.

File Path: C:\xampp\htdocs\dr_portfolio\admin\login.php

Find the login form in login.php and add this line, for example, below the "Login" button or next to it:

HTML

<form action="login.php" method="POST">
                <div class="form-group">
                    <button type="submit" name="login_user" class="btn btn-primary btn-block">Login</button>
                </div>
                <div class="text-center">
                    <a href="forgot_password.php">Forgot Password?</a> </div>
            </form>
Also, in login.php, you can add code to display the success message after a password reset:

PHP

// Inside C:\xampp\htdocs\dr_portfolio\admin\login.php, usually near the top after session_start()
// Add this block to display the success message from reset_password.php
if (isset($_SESSION['reset_success_message'])) {
    $message = $_SESSION['reset_success_message'];
    $message_type = 'success';
    unset($_SESSION['reset_success_message']); // Clear the message after displaying it
}
Crucial Configuration for Email Sending:
In admin/forgot_password.php, you MUST configure the PHPMailer settings for your SMTP server.

PHP

                    $mail->Host       = 'smtp.gmail.com'; // Example for Gmail. Use your email provider's SMTP host.
                    $mail->SMTPAuth   = true;
                    $mail->Username   = 'your_email@example.com'; // YOUR EMAIL ADDRESS (e.g., your Gmail address)
                    $mail->Password   = 'your_email_password';   // YOUR EMAIL PASSWORD OR APP-SPECIFIC PASSWORD (if using Gmail, generate an App Password)
                    $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS; // Use ENCRYPTION_SMTPS for port 465, ENCRYPTION_STARTTLS for port 587
                    $mail->Port       = 587; // Usually 465 for SMTPS, 587 for STARTTLS
Gmail Example: If you're using Gmail, you'll likely need to generate an "App password" because regular Gmail passwords often don't work with SMTP for security reasons (unless you enabled "Less secure app access" which is deprecated). Go to your Google Account Security settings to generate one.

Other Providers: Consult your email provider's documentation for their SMTP settings (Host, Port, Encryption, Username, Password).

$mail->setFrom('no-reply@yourdomain.com', 'Dr. Portfolio Support'); - This is the "From" address. It's often recommended to use an email address that belongs to your domain.

Testing the Forgot Password Feature:
Database: Ensure you've run the ALTER TABLE queries.

PHPMailer: Ensure PHPMailer files are correctly placed in dr_portfolio/vendor/src/ and you've configured the SMTP settings in forgot_password.php.

Files: Make sure all forgot_password.php, reset_password.php, and updated login.php files are saved in dr_portfolio/admin/.

Try it:

Go to http://localhost/dr_portfolio/admin/login.php.

Click "Forgot Password?".

Enter an email address that exists in your users table.

Check that email's inbox for the reset link.

Click the link and follow the steps to reset.






in this project, how patients are know the status of appointment?



Show thinking
Based on the project structure we've built so far, patients currently have no direct, self-service way to check their appointment status online.

Here's how patients would know their appointment status with the current code, and the recommended ways to improve this:

Current Patient Knowledge of Appointment Status:
On-Screen Confirmation After Booking:

When a patient fills out the appointment form on appointments.php and submits it, they receive an immediate on-screen message (e.g., "Your appointment request has been submitted successfully!"). This confirms the submission, not necessarily the confirmation by the doctor.

Manual Communication (Implicit):

Currently, for a patient to know the status (pending, confirmed, cancelled, completed) that the doctor manages in admin/appointments.php, the doctor's office would need to manually contact the patient. This would typically be via:

A phone call

A separate email (sent manually by the staff)

An SMS message

Recommended Improvements for Patient Status Knowledge:
To provide patients with better and more automated updates, here are the most common and effective approaches, from simplest to most complex:

1. Automated Email Notifications (Highly Recommended - Proactive)
This is the most common and expected way for patients to receive updates. When the doctor changes an appointment's status in the admin panel, an email is automatically sent to the patient.

How to implement:

Modify dr_portfolio/admin/appointments.php:

When the appointment status is updated (in the if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['update_status'])) block), after the database update is successful, fetch the patient's email and appointment details.

Integrate PHPMailer (which you've already set up for forgot password) to send an email to the patient with the new status and appointment details.

Example Logic for admin/appointments.php (Inside if ($stmt->execute()) for status update):

PHP

// Assuming PHPMailer is already included and configured at the top of appointments.php
// (Similar to how it's done in forgot_password.php)
// require_once '../vendor/src/PHPMailer.php';
// require_once '../vendor/src/SMTP.php';
// require_once '../vendor/src/Exception.php';
// use PHPMailer\PHPMailer\PHPMailer;
// use PHPMailer\PHPMailer\SMTP;
// use PHPMailer\PHPMailer\Exception;

if ($stmt->execute()) {
    $message = 'Appointment status updated successfully!';
    $message_type = 'success';

    // --- Fetch appointment details to send email ---
    $sql_fetch_appointment = "SELECT patient_name, patient_email, appointment_date, appointment_time, s.service_name
                              FROM appointments a
                              LEFT JOIN services s ON a.service_id = s.id
                              WHERE a.id = ?";
    $stmt_fetch_appointment = $conn->prepare($sql_fetch_appointment);
    $stmt_fetch_appointment->bind_param("i", $appointment_id);
    $stmt_fetch_appointment->execute();
    $appointment_details = $stmt_fetch_appointment->get_result()->fetch_assoc();
    $stmt_fetch_appointment->close();

    if ($appointment_details) {
        $patient_email = $appointment_details['patient_email'];
        $patient_name = $appointment_details['patient_name'];
        $appointment_date = $appointment_details['appointment_date'];
        $appointment_time = date('h:i A', strtotime($appointment_details['appointment_time']));
        $service_name = $appointment_details['service_name'] ?? 'Not Specified';
        $new_status_display = ucfirst(htmlspecialchars($new_status));

        $mail = new PHPMailer(true);
        try {
            // Server settings (use the same as your forgot_password.php PHPMailer setup)
            $mail->isSMTP();
            $mail->Host       = 'smtp.gmail.com'; // Your SMTP host
            $mail->SMTPAuth   = true;
            $mail->Username   = 'your_email@example.com'; // Your SMTP username
            $mail->Password   = 'your_email_password';   // Your SMTP password
            $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
            $mail->Port       = 587;

            // Recipients
            $mail->setFrom('no-reply@yourdomain.com', 'Dr. Portfolio Appointments');
            $mail->addAddress($patient_email, $patient_name);

            // Content
            $mail->isHTML(true);
            $mail->Subject = 'Your Appointment Status Has Been Updated';
            $mail->Body    = "Dear " . htmlspecialchars($patient_name) . ",<br><br>"
                           . "The status of your appointment has been updated.<br><br>"
                           . "<b>Appointment Details:</b><br>"
                           . "Date: " . htmlspecialchars($appointment_date) . "<br>"
                           . "Time: " . htmlspecialchars($appointment_time) . "<br>"
                           . "Service: " . htmlspecialchars($service_name) . "<br>"
                           . "New Status: <strong>" . $new_status_display . "</strong><br><br>"
                           . "If you have any questions, please contact us directly.<br><br>"
                           . "Thank you,<br>Dr. Portfolio Team";
            $mail->AltBody = "Dear " . htmlspecialchars($patient_name) . ",\n\n"
                           . "The status of your appointment has been updated.\n\n"
                           . "Appointment Details:\n"
                           . "Date: " . htmlspecialchars($appointment_date) . "\n"
                           . "Time: " . htmlspecialchars($appointment_time) . "\n"
                           . "Service: " . htmlspecialchars($service_name) . "\n"
                           . "New Status: " . $new_status_display . "\n\n"
                           . "If you have any questions, please contact us directly.\n\n"
                           . "Thank you,\nDr. Portfolio Team";

            $mail->send();
            // Optionally, add a message to the admin that email was sent
            // $message .= ' Patient notified via email.';
        } catch (Exception $e) {
            // Log this error, but don't show it directly to the admin for security/cleanliness
            error_log("Failed to send appointment status update email to {$patient_email}. Mailer Error: {$mail->ErrorInfo}");
            // $message .= ' (Failed to send notification email to patient.)';
        }
    }
} else {
    $message = 'Error updating status: ' . $stmt->error;
    $message_type = 'danger';
}
2. Public Appointment Status Checker (More Involved - Reactive)
This would be a new public page (e.g., dr_portfolio/check_appointment.php) where a patient could enter their email and/or a unique appointment ID to view its status.

How to implement:

Generate Unique ID: When a new appointment is booked via appointments.php, generate a unique, short alphanumeric ID (e.g., APPT-XYZ123). Store this ID in the appointments table.

New Page (check_appointment.php): Create a public PHP page with a form.

User Input: The form would ask for the patient's email and the unique appointment ID.

Database Query: Query the appointments table using the provided email and unique ID.

Display Status: Display the current status and other relevant details if a match is found. If not found or details don't match, show an error.

Email Confirmation (Crucial): When the initial appointment is booked, the confirmation email should include this unique appointment ID.

This option adds more complexity as it requires a new database column, a new public page, and the generation/management of unique IDs.

3. Full Patient Portal (Most Complex)
This involves a complete patient registration and login system, where patients have their own dashboard to view all past and future appointments, medical records, etc. This is outside the scope of a basic portfolio project but is the ultimate solution for comprehensive patient management.

For your project, implementing automated email notifications (Option 1) is the most impactful and feasible next step to address how patients know their appointment status.